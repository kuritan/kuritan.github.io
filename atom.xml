<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ビールのおつまみに</title>
  
  <subtitle>リモート副業探しています</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kuritan.github.io/"/>
  <updated>2023-02-07T06:29:58.249Z</updated>
  <id>http://kuritan.github.io/</id>
  
  <author>
    <name>kuritan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你好东京，我买房了</title>
    <link href="http://kuritan.github.io/Foreigner-buy-a-house-in-Tokyo/"/>
    <id>http://kuritan.github.io/Foreigner-buy-a-house-in-Tokyo/</id>
    <published>2022-05-06T05:25:31.000Z</published>
    <updated>2023-02-07T06:29:58.249Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉，离开北京，踏上东京工作&amp;生活已经漫步在了第四个年头。<br>虽然新闻中每天日元走低，但刚需没有什么道理可讲，我还是毅然决然……买房了！<br>总结一下自己的得失，也希望能给他人用作参考。  </p><a id="more"></a><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p><strong>手动IP归属地:日本 (狗头</strong><br>在日本工作生活已有了4年，跟女朋友同居也有了好一阵，年龄上也到了要考虑结婚的阶段。<br>说到结婚，中国人自然绕不开一个话题……买房?!  平时倒也有时不时看看路边电线杆上被新贴的房产出售广告，但也确实没有用心在认真寻找，<br>不经意间……</p><h2 id="偶遇中介"><a href="#偶遇中介" class="headerlink" title="偶遇中介"></a>偶遇中介</h2><p>某天，与女朋友酒足饭饱，走在回家路上，<br>猛然发现，路边摆着一个没见过的房产出售广告牌，<br>定睛一看，这不就是旁边的楼吗?!  看平面图感觉房型还不错，诡使神差之下，打了广告牌上的电话，预约内见。<br>……<br>…..<br>….<br>…<br>指定的时间，指定的地点，初识了最终帮我们购下房产的中介小哥儿(日本人)。<br>最终并没有选择这个房间，于是内见的具体过程按下不表。<br>但以此为契机，中介小哥儿听取我们的需求后，开始为我们寻觅合适的房产。<br>之后主要用Line沟通，小哥儿一次会给我们发送20件左右的房产信息以供选择。</p><h2 id="确立房型"><a href="#确立房型" class="headerlink" title="确立房型"></a>确立房型</h2><h3 id="一户建or公寓"><a href="#一户建or公寓" class="headerlink" title="一户建or公寓"></a>一户建or公寓</h3><p>话说到这里，自然有一个问题会出现，房子买什么类型的呢？<br>日本对自住型房产的主要区分为一户建和公寓。<br><strong>喜好因人而异，没有高低之分。</strong><br>按我个人来说，</p><ul><li>喜欢大海</li><li>讨厌人多的地方</li><li>远程办公，对交通便捷度并不敏感</li><li>同样因为远程办公，对公用设施的丰富程度很敏感</li><li>女朋友希望能在家看到彩虹桥(レインボーブリッジ)</li></ul><p>综上所述，相对于一户建，还是高层公寓更适合我的需求。</p><h3 id="新房or二手"><a href="#新房or二手" class="headerlink" title="新房or二手"></a>新房or二手</h3><p>另外一个绕不开的问题就是这个了。<br>我个人及女友对新房没有任何执着，这里毫不犹豫选择了二手房的路线。  </p><h2 id="实际内见"><a href="#实际内见" class="headerlink" title="实际内见"></a>实际内见</h2><p>断断续续持续了半年之久，有纠结也有不舍，<br>二手房还是靠运气，有房型很好，公用设施一言难尽的，<br>自然也有公用设施豪华，房型拉胯的……<br>还是那句话，没有最好的，只有合适的。<br>理清自己的需求，认明自己的能力，在可以负担的范围内，选择最合适的总不会有错。<br>-&gt; 湾岸地区临近大海和运河，阳台可以同时看到彩虹桥和富士山的高层公寓，就决定是你了！</p><h2 id="申请贷款"><a href="#申请贷款" class="headerlink" title="申请贷款"></a>申请贷款</h2><h3 id="在留资格"><a href="#在留资格" class="headerlink" title="在留资格"></a>在留资格</h3><p>这里提到了在留资格的问题，申请时我的在留资格是高度专门职。<br>也就是大家通常说的高度人才资格。<br>但仅靠这个资格(或者人文技术国际业务资格也同理)，在登陆日本仅4年的情况下，仍然不足以打动各日本本土银行的心。<br>大致只有SMBC信托银行和东京star银行能够下贷，但条件也不尽如人意。（总额&amp;利率）<br><strong>中国银行的日本分行倒是可以下贷，但利率是日本本土银行的10倍左右，同时贷款总额也很受限，所以最初就没有在我的选项中</strong></p><p>正巧我高度专门职资格也满了1年，条件足够申请永驻权，但审核时间要4～6个月之久，<br>但本着不抛弃不放弃的原则，还是把这个附加信息告知中介小哥儿，<br>让他代为向各家银行打听，有没有希望能拿到合适条件的贷款。<br>没想到，转机真的就来了……</p><h3 id="银行选择"><a href="#银行选择" class="headerlink" title="银行选择"></a>银行选择</h3><p>大手银行mizuho以我同时提交申请永驻权的回执单，及全部申请资料的复印件,同时首付两成+为条件，<br>愿意以近乎日本人同等条件向我下贷！<br>这时我有了3家银行备选</p><ul><li>mizuho银行<ul><li>利率0.575%，总额足够</li></ul></li><li>SMBC信托银行<ul><li>总额不足</li></ul></li><li>东京star银行<ul><li>利率1.25%, 取得永驻权后切换为0.9%</li></ul></li></ul><h4 id="SMBC信托不是三井住友信托"><a href="#SMBC信托不是三井住友信托" class="headerlink" title="SMBC信托不是三井住友信托"></a>SMBC信托不是三井住友信托</h4><p>可能只有我不知道，但既然遇上了，就分享个银行小知识，<br>大家都知道SMBC是三井住友银行的英文缩写，但是，<br>SMBC信托银行并不等于三井住友信托银行，这是两家完全不同的银行！<br>※SMBC信托银行是被SMBC收购的原外资银行，所以对外国人比较友好</p><h3 id="个人贷or共同贷"><a href="#个人贷or共同贷" class="headerlink" title="个人贷or共同贷"></a>个人贷or共同贷</h3><p>这里并没有太多忧郁，考虑到今后还会买车等等问题，还是我个人承担全部房贷要更灵活机动。  </p><h3 id="临时审查-amp-正式审查"><a href="#临时审查-amp-正式审查" class="headerlink" title="临时审查&amp;正式审查"></a>临时审查&amp;正式审查</h3><p>从上面的条件也可以看出，总体还是mizuho银行要更合适，<br>便在临时审查(仮審査)后申请了正式审查(本審査)。<br>结果让人大呼意外，正式审查的结果，居然将临时审查时的利率进一步降低了0.2%,<br>最终银行愿意以0.375%的利率向我贷款！<br>中介小哥儿也没有想到居然能给外国人这么优厚的条件。  </p><h2 id="签署合同"><a href="#签署合同" class="headerlink" title="签署合同"></a>签署合同</h2><h3 id="与房主"><a href="#与房主" class="headerlink" title="与房主"></a>与房主</h3><p>与房主(日本人)的合同是在对方中介的事务所进行，手续进行中与房主闲聊发现，<br>房主经营私塾，居然还在上海工作过两年！（负责教授居住上海的日本人子弟）<br>交完定金，在如释重负的心情下，结束了半天的流程。  </p><h3 id="与银行"><a href="#与银行" class="headerlink" title="与银行"></a>与银行</h3><p>正式交房一周前必须签署完毕与银行的贷款合同，<br>在讲解了一番保险相关事宜后，也顺利结束。</p><h3 id="地震火灾保险"><a href="#地震火灾保险" class="headerlink" title="地震火灾保险"></a>地震火灾保险</h3><p>地震火灾保险网上也有各种各样的运营公司，<br>我选择了省事路线，跟房产中介公司的合作方痛快签了下来。  </p><h2 id="交接现房"><a href="#交接现房" class="headerlink" title="交接现房"></a>交接现房</h2><p>激动人心的时刻到来，同样在银行开始一套流程。<br>一番操作之后，顺利拿到了钥匙！<br><img src="key.JPG" alt="钥匙">  </p><h2 id="终"><a href="#终" class="headerlink" title="终"></a>终</h2><p>流水账式写完，不知道能作为谁的参考。<br>提前知道一件事能不能做成功，远比自己去试错要来得容易。<br>希望大家在海外都能拥抱属于自己的幸福！  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知不觉，离开北京，踏上东京工作&amp;amp;生活已经漫步在了第四个年头。&lt;br&gt;虽然新闻中每天日元走低，但刚需没有什么道理可讲，我还是毅然决然……买房了！&lt;br&gt;总结一下自己的得失，也希望能给他人用作参考。  &lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://kuritan.github.io/categories/Life/"/>
    
    
      <category term="CN" scheme="http://kuritan.github.io/tags/CN/"/>
    
      <category term="Life" scheme="http://kuritan.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>忽然と、GitlabRunnerが使えなくなった</title>
    <link href="http://kuritan.github.io/gitlab-runner-unexpected-outage/"/>
    <id>http://kuritan.github.io/gitlab-runner-unexpected-outage/</id>
    <published>2022-05-06T04:00:43.000Z</published>
    <updated>2023-02-07T06:29:58.261Z</updated>
    
    <content type="html"><![CDATA[<p>タイトルはちょっと大げさになっていますが、<br>弊社で実際発生したインシデントを、今回ご紹介したいと思います。</p><a id="more"></a><h2 id="サマリ"><a href="#サマリ" class="headerlink" title="サマリ"></a>サマリ</h2><p>夜中からgitlab ciがうまく起動できず、jobがtimeoutまで詰まりつづけ、<br>定時に入ったら、CI実行不能な不具合が各処から出てきた。<br>状況確認＆一時対応策を講じるまで、1時間半ほどかかり、当日中に恒久対応を取りました。</p><h2 id="インパクト"><a href="#インパクト" class="headerlink" title="インパクト"></a>インパクト</h2><p>時限式or手動によるgitlab-CIの実行が半日程度、利用不可となった</p><h2 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h2><p>CI用のベースimageがubuntuで、デフォルトでは、<br>毎日osの自動updateを行うように設定されています。<br>AMI からインスタンスを起動したときも同じ状況になるので、AMI が古ければ古いほど更新パッケージが多くなり、<br>起動直後に負荷が高まったり、しばらく apt install できない (unattended-upgrade がロックを獲得しているので) 時間が続いたりします。<br>その結果、gitlab-ciのbaseコントローラーがtimeoutまで、<br>health checkが通らず、そのままシャットダウンされ、<br>利用可能なgitlab-ci runnerいつまでも０のままで、誰もCIを使えない状態となりました。</p><h2 id="発生原因"><a href="#発生原因" class="headerlink" title="発生原因"></a>発生原因</h2><p>gitlab-ci runnerがうまく起動できず、利用可能runner数がずっと0</p><h2 id="対応"><a href="#対応" class="headerlink" title="対応"></a>対応</h2><ul><li>状況確認し、障害をアナウンス</li><li>runner baseでrunnerがうまく立ち上がらないことを確認</li><li>logを細かく閲覧し、解決の糸口になれそうなキーワードを探す</li><li>立ち上げしたばかりのrunnerにログインし、プロセスを確認したところ、apt installがいつまでも終- わらないことを気づく</li><li>手動でプロセスをkillし、sudo apt install docker.ioすれば、無事health checkを通り、CIの- runnerとして機能されるようになった</li><li>↑を一時対応策とし、6台のrunnnerを確保したら、サービス復旧をアナウンス</li><li>runnerがauto scalingと設定されており、このままだと、障害がかならず再発するので、恒久対策を模- 索</li><li>手かがりをゲットし、ubuntuのdaily更新が問題かも(AMIがかなり古いので)</li><li>AMIを作り直し(aptを最新にする&amp;daily更新を無効化)<ul><li>/lib/systemd/system/apt-daily.timer</li><li>/lib/systemd/system/apt-daily-upgrade.timer</li><li>Persistent=true -&gt; false</li></ul></li><li>適用し、問題なく機能することを確認</li></ul><h2 id="検出"><a href="#検出" class="headerlink" title="検出"></a>検出</h2><p>pagerdutyによるアラート＆社員の報告</p><h2 id="教訓"><a href="#教訓" class="headerlink" title="教訓"></a>教訓</h2><h3 id="うまくいった事"><a href="#うまくいった事" class="headerlink" title="うまくいった事"></a>うまくいった事</h3><p>CIコンテナ操作のためな手順書があって、コマンドがコピペで利用可能</p><h3 id="うまくいかなかった事"><a href="#うまくいかなかった事" class="headerlink" title="うまくいかなかった事"></a>うまくいかなかった事</h3><p>作業分担が難しく、結局ひとりで対応するしかなかった</p><h3 id="幸運だった事"><a href="#幸運だった事" class="headerlink" title="幸運だった事"></a>幸運だった事</h3><p>障害時間帯にメンテやインパクトの大き作業をされていなかった</p><h3 id="再発防止の為にできる事"><a href="#再発防止の為にできる事" class="headerlink" title="再発防止の為にできる事"></a>再発防止の為にできる事</h3><p>ベースAMIの再構築</p><h3 id="タイムライン"><a href="#タイムライン" class="headerlink" title="タイムライン"></a>タイムライン</h3><p>09:50 pagerdutyのgitlab-ci job大量詰まりアラートを気づき<br>10:05 CI利用不可の報告が来た<br>10:10 障害を全社アナウンス<br>11:00 SREチーム朝会で情報共有<br>11:30 一時対応策を実行し、システム順次復旧を確認<br>11:35 システム復旧を全社アナウンス<br>12:00 SREチームMTGで対応状況を共有<br>16:00 原因を究明し、恒久対策を実施</p><h3 id="参考情報"><a href="#参考情報" class="headerlink" title="参考情報"></a>参考情報</h3><p><a href="https://hirose31.hatenablog.jp/entry/2020/02/19/165738" target="_blank" rel="noopener">Ubuntu 18.04 で OS 起動時の apt update と unattended-upgrade を抑制する方法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;タイトルはちょっと大げさになっていますが、&lt;br&gt;弊社で実際発生したインシデントを、今回ご紹介したいと思います。&lt;/p&gt;
    
    </summary>
    
      <category term="infra" scheme="http://kuritan.github.io/categories/infra/"/>
    
    
      <category term="JP" scheme="http://kuritan.github.io/tags/JP/"/>
    
      <category term="aws" scheme="http://kuritan.github.io/tags/aws/"/>
    
      <category term="docker" scheme="http://kuritan.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Argocdで自家製マスターデータ管理を</title>
    <link href="http://kuritan.github.io/master-data-management-via-argocd/"/>
    <id>http://kuritan.github.io/master-data-management-via-argocd/</id>
    <published>2022-02-04T02:37:41.000Z</published>
    <updated>2023-02-07T06:29:58.261Z</updated>
    
    <content type="html"><![CDATA[<p>ちょっと開発よりのネタをお話できればと、今回思ってましたね。<br>k8s(GKE)を触りつつ、バックエンドのロジックにも関わりまして、モバイルゲームの開発として、<br>やっぱ避けられないのはマスターデータの管理と思い、<br>自家製mater data運用パイプラインをご紹介しましょうー</p><a id="more"></a><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>モバイルゲームにおいて、ユーザ情報、所持アイテム、イベント情報などなど、様々な情報を管理しないといけない課題がありまして、<br>それらこそがmaster dataです。<br>非エンジニアの方(planer, directorなど)に情報の編集をしてもらい、データ保管、共有、更新、デリバリー、ステップ・バイ・ステップで、<br>本番環境に適用できるまでのパイプラインを実現したい。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>考案時点では、それ相応なライブラリーがまだ存在しておらず、ツールで担保することを決めました。<br>後に、社内Golang専門のミドルウェアGが発足され、ライブラリーでも担保できるようになっていますが、<br>今回はあくまでツールの話をさせてくださーい  </p><h2 id="実装方法"><a href="#実装方法" class="headerlink" title="実装方法"></a>実装方法</h2><h3 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h3><h4 id="必要ツール"><a href="#必要ツール" class="headerlink" title="必要ツール"></a>必要ツール</h4><ul><li>スプレッドシート<ul><li>データ編集＆保管</li></ul></li><li>Slack channel<ul><li>bot(別途gceにて実装)<ul><li>理由としては、単純にk8sではうまく起動できず、単体運用でも問題ないし、変更も少ないのでgceにて建造した</li></ul></li></ul></li><li>Circle ci(別CIでもok)</li><li>ArgoCD<ul><li>主役</li></ul></li><li>gitリポジトリー<ul><li>サーバーサイドコード/master data(json)格納用<ul><li>master dataファイルのハッシュチェック機能</li><li>dbとcdnへの適用機能、及びそれらのアクションを実行するdocker環境（以下でseederという）</li><li>スプレッドシート-&gt;json変換機能</li></ul></li></ul></li></ul><h4 id="フロー"><a href="#フロー" class="headerlink" title="フロー"></a>フロー</h4><p><img src="data-flow.png" alt="data-flow"></p><p><img src="argocd-work-flow.png" alt="argocd-work-flow"></p><h5 id="流れ説明"><a href="#流れ説明" class="headerlink" title="流れ説明"></a>流れ説明</h5><ol><li>スプレッドシートでのmaster data情報を編集</li><li>botでmaster data更新を実行(gitリポジトリの最新をfetch、スプレッドシート-&gt;jsonに変換し、gitリポジトリーの指定dirへcommit)</li><li>botでmaster dataのpublishを実行(gitリポジトリの最新をfetch、circle-ciの指定workflowをキック)</li><li>circle-ciで最新seeder imageを作り、cloud storageの指定bucketの指定位置に、master dataを更新すると示すflagファイル(空ファイル)をuploadしてから、Argocdのsyncをキック</li><li>Argocdのresource hook機能を使い、メインリソースsyncの前に、seederをjobとして実行する(argocd.argoproj.io/hook:PreSync)</li><li>seeder job内で、master dataのハッシュチェック(cloud storageにて保存されたhash listと一致するか)やmaster data更新flagの存在確認(存在の場合のみ実行)を行い、最新master dataをデリバリーする(cdnへupload、dbへinsert)</li><li>flagファイルを削除し、パイプライン終了</li></ol><h5 id="豆知識"><a href="#豆知識" class="headerlink" title="豆知識"></a>豆知識</h5><p>API経由でCircleCIをキックする時、利用するtokenはPersonal API Tokenでないと動けない！！！  </p><ul><li><a href="https://support.circleci.com/hc/en-us/articles/360050351292-How-to-trigger-a-workflow-via-CircleCI-API-v2" target="_blank" rel="noopener">Note: keep in mind that you have to use a personal API token; project tokens are currently not supported on CircleCI API (v2).</a></li><li><a href="https://app.circleci.com/settings/user/tokens" target="_blank" rel="noopener">Personal API Token</a></li><li><a href="https://circleci.com/docs/api/v2/#operation/triggerPipeline" target="_blank" rel="noopener">CircleCI API doc</a></li></ul><h2 id="思った事"><a href="#思った事" class="headerlink" title="思った事"></a>思った事</h2><p>ツールだけでパイプラインを担保するには、ツールロックインのリスクがあり、<br>もっといい方法がある時それらに使うことに越したことがないのだが、<br>それなりに業界ではメジャーのツールであれば、そこまで心配する必要がなく、開発効率を優先した方が、<br>みんなハッピーになれますねー</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ちょっと開発よりのネタをお話できればと、今回思ってましたね。&lt;br&gt;k8s(GKE)を触りつつ、バックエンドのロジックにも関わりまして、モバイルゲームの開発として、&lt;br&gt;やっぱ避けられないのはマスターデータの管理と思い、&lt;br&gt;自家製mater data運用パイプラインをご紹介しましょうー&lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="http://kuritan.github.io/categories/dev/"/>
    
    
      <category term="JP" scheme="http://kuritan.github.io/tags/JP/"/>
    
      <category term="k8s" scheme="http://kuritan.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Assume roleでクロスアカウントのAWSリソースを弄ろう</title>
    <link href="http://kuritan.github.io/bidirectional-assume-role-for-aws/"/>
    <id>http://kuritan.github.io/bidirectional-assume-role-for-aws/</id>
    <published>2022-02-02T07:21:24.000Z</published>
    <updated>2023-02-07T06:29:58.261Z</updated>
    
    <content type="html"><![CDATA[<p>ようやく気が向いてて、何か書こうかと思っていたら、やっぱAWSネタになっちょうね。<br>今回は二つのAWSアカウントの間で、双方向assume roleでAWSリソースを操作する方法を試してみました。<br>良かったら、しばしお付き合いくださいましー</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>以前も、こちらのブログで書いたことがある<a href="https://kuritan.github.io/selfservice-with-chatworkwebhook-apigateway-and-lambda/">chatworkとlambdaでセルフサービスしようぜ</a>ですが、<br>iptablesによるsshguardの解除セルフサービスは、また新しいニーズが出てきて、それを対応するための実装は、今回のお話です。  </p><h3 id="新ニーズ"><a href="#新ニーズ" class="headerlink" title="新ニーズ"></a>新ニーズ</h3><ul><li>既存を維持しつつ、別のec2インスタンスもbot経由で、解除できるようにしたい</li><li>解除対象となる2台のec2インスタンスは、別々のAWSアカウントに存在する</li><li>コストとセキュリティをある程度、両立したい</li></ul><h2 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h2><p>おやおや、困ったものだね〜と呟きつつ、前回の設計を見直し、ズバリこれだ！<br><img src="bidirectional-assume-role-for-aws.png" alt="構成図">   </p><p>基本は、前回の設計を踏襲したモノとなりますが、<br>その上、クロスアカウント対応のため、lambdaからassume roleをリクエストし、その権限をもって、別AWSアカウントのリソースを操作する。<br>※双方向assume roleが必要  </p><p>次に詳しく、各登場キャラクターの役割を説明しようと思います。  </p><h2 id="各キャラクターの役割"><a href="#各キャラクターの役割" class="headerlink" title="各キャラクターの役割"></a>各キャラクターの役割</h2><h3 id="Account-A"><a href="#Account-A" class="headerlink" title="Account A"></a>Account A</h3><h4 id="bot-user"><a href="#bot-user" class="headerlink" title="bot user"></a>bot user</h4><p>専用のbotユーザにTOをつけて話しかけると、webhookが叩かれ、apigatewayに送信<br>※ここではchatwork userとなります  </p><p>IPアドレスのみの場合、IP一覧チェックを行い、解除&amp;更新もする<br>BAN部屋のメッセージを引用された場合、IP一覧チェックを行い、解除&amp;更新もする<br>それ以外の場合、デフォルトhelpメッセージを返す  </p><h4 id="API-gateway"><a href="#API-gateway" class="headerlink" title="API gateway"></a>API gateway</h4><p>chatwork webhookから受信し、lambdaでtoken検証をする<br>問題ないの場合、bodyの解析を行う  </p><ul><li>IPアドレスのみの場合、IP一覧チェックを行い、解除&amp;更新もする<ul><li>ない場合は、その旨をchatworkに返す</li></ul></li><li>BAN部屋のメッセージを引用された場合、IP一覧チェックを行い、解除&amp;更新もする<ul><li>ない場合は、その旨をchatworkに返す</li></ul></li><li>それ以外の場合、デフォルトhelpメッセージを返す</li></ul><h4 id="lambda-function"><a href="#lambda-function" class="headerlink" title="lambda function"></a>lambda function</h4><p>systemmanagerとs3のSDKを使って、shell実行やipチェックを行う</p><ul><li>s3の指定場所に、現在BANされているIPアドレスの一覧リスト(対象サーバー分のファイルが存在、ファイル名はサーバー名となっている)をダウンロード</li><li>bot userから指定されたIPが、リストに載ってるかをチェック<ul><li>載ってる場合、BANリストのパスとBANされたiptables ruleと組み合わせたdictをlambdaに返し、その解除&amp;更新もする</li><li>載ってない場合、Noneをlambdaに返し、該当IPが存在しない旨をchatworkに返す</li></ul></li></ul><p>※api gatewayは最大3秒のtimeoutが設定されており（変更不可）、都度各サーバーでiptablesをチェックするより、<br>s3上にBAN listをアップロードし、それらをチェックした方がレスポンスが早いので、こちらのいうな実装になっております。</p><p><a href="https://kuritan.github.io/selfservice-with-chatworkwebhook-apigateway-and-lambda/">前回</a>の実装をいつくか変更していたが、イメージだけこちらで書きます。(そのままでは動けない可能性あり)  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> boto3.session <span class="keyword">import</span> Session</span><br><span class="line"></span><br><span class="line"><span class="comment"># assume roleのセッションを取得</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sts_session</span><span class="params">()</span>:</span></span><br><span class="line">    role_arn = <span class="string">"arn:aws:iam::[Account B]:role/[role name]"</span></span><br><span class="line">    session_name = <span class="string">"aws-infra-sg"</span> <span class="comment">#なんか適当な名前</span></span><br><span class="line">    region = <span class="string">"ap-northeast-1"</span></span><br><span class="line">    client = boto3.client(<span class="string">'sts'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># assume_roleでロールに設定された権限のクレデンシャル(一時キー)を発行する</span></span><br><span class="line">    response = client.assume_role(</span><br><span class="line">        RoleArn=role_arn,</span><br><span class="line">        RoleSessionName=session_name</span><br><span class="line">    )</span><br><span class="line">    session = Session(</span><br><span class="line">        aws_access_key_id=response[<span class="string">'Credentials'</span>][<span class="string">'AccessKeyId'</span>],</span><br><span class="line">        aws_secret_access_key=response[<span class="string">'Credentials'</span>][<span class="string">'SecretAccessKey'</span>],</span><br><span class="line">        aws_session_token=response[<span class="string">'Credentials'</span>][<span class="string">'SessionToken'</span>],</span><br><span class="line">        region_name=region</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> session</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取得したassume roleセッションを利用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_ssm_cmd</span><span class="params">(ban_ip: str, pool: str)</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> pool == opengate_ban_ip_pool:</span><br><span class="line">            session = get_sts_session()</span><br><span class="line">            ec2 = session.client(<span class="string">'ec2'</span>)</span><br><span class="line">            ssm = session.client(<span class="string">'ssm'</span>, region_name=<span class="string">'ap-northeast-1'</span>)</span><br><span class="line">            ban_ip_pool = opengate_ban_ip_pool</span><br><span class="line">            aws_profile = <span class="string">"--profile infra"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ban_ip_pool = gitlab_ban_ip_pool</span><br><span class="line">            aws_profile = <span class="string">""</span></span><br></pre></td></tr></table></figure><h4 id="cloudwatch-log"><a href="#cloudwatch-log" class="headerlink" title="cloudwatch log"></a>cloudwatch log</h4><p>lambda functionの実行logのたまり場です。<br>debug時には、相当役に立つ</p><h4 id="system-manager"><a href="#system-manager" class="headerlink" title="system manager"></a>system manager</h4><p>実際リソース操作するインターフェイスです。<br>run command経由で、amazon-ssm-agentに命令し、shellコマンドを実行してもらうようにしています  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo %s" % ban_ip</span><br><span class="line">echo `date` &gt; /tmp/`hostname`.txt</span><br><span class="line">echo `hostname` &gt;&gt; /tmp/`hostname`.txt</span><br><span class="line">iptables -L --line-numbers -n | grep %s | cut -d' ' -f1 | xargs -L 1 iptables -D sshguard" % ban_ip</span><br><span class="line">systemctl restart sshguard</span><br><span class="line">iptables -L sshguard --line-numbers -n &gt; /tmp/`hostname`.txt</span><br><span class="line">aws s3 cp %s s3://%s/ %s" % (ban_ip_pool, s3_bucket_name, aws_profile)</span><br></pre></td></tr></table></figure><h4 id="ec2"><a href="#ec2" class="headerlink" title="ec2"></a>ec2</h4><p>amazon-ssm-agentを事前にインストールし、起動させる必要があります。<br>system managerからの命令を受け、それを実行する。<br>※インスタンス特定できるように、指定のtagをつける<br>※bot: release-sshguard  </p><h4 id="s3-bucket"><a href="#s3-bucket" class="headerlink" title="s3 bucket"></a>s3 bucket</h4><p>BAN listファイルの格納場所<br>サーバーごとのBAN listファイルがここに羅列されています<br>※ファイル名は、サーバー名となってます  </p><h4 id="cloudwatch-events-今event-bridgeという名前になった"><a href="#cloudwatch-events-今event-bridgeという名前になった" class="headerlink" title="cloudwatch events(今event bridgeという名前になった)"></a>cloudwatch events(今event bridgeという名前になった)</h4><p>BAN listが随時更新させるように、1分ごとで、system manager経由で最新BAN listファイルをs3にアップロードさせるための機能<br>EC2インスタンスのBAN listが実際更新されつつではあるが、頻度やコストの兼ね合いで、1分間/回の更新はもう十分と考えていました。  </p><h4 id="iam-sts"><a href="#iam-sts" class="headerlink" title="iam(sts)"></a>iam(sts)</h4><p>クロスアカウントのassume roleのため、新しいiam roleを作り、assumeできる権限を付与しています。<br>※Account Bに利用させるため  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Account Aのlambda実行roleに、Account Bのassume roleを許可</span><br><span class="line">resource &quot;aws_iam_role_policy&quot; &quot;lambda_cross_account&quot; &#123;</span><br><span class="line">  name   = &quot;lambda_cross_account&quot;</span><br><span class="line">  role   = aws_iam_role.lambda.id</span><br><span class="line">  policy = &lt;&lt;JSON</span><br><span class="line">&#123;</span><br><span class="line">  &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">  &quot;Statement&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Action&quot;: &quot;sts:AssumeRole&quot;,</span><br><span class="line">        &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">        &quot;Resource&quot;: &quot;arn:aws:iam::[Account B]:role/InstanceProfile-for-infra-sts&quot;</span><br><span class="line">        &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">JSON</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"># Account Aで新規s3を操作できるroleを作り、Account Bのassumeroleも許可</span><br><span class="line"> </span><br><span class="line">resource &quot;aws_iam_role&quot; &quot;ssm_cross_account&quot; &#123;</span><br><span class="line">  name               = &quot;AssumeRole-for-sshban-s3&quot;</span><br><span class="line">  assume_role_policy = &lt;&lt;JSON</span><br><span class="line">&#123;</span><br><span class="line">  &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">  &quot;Statement&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">      &quot;Principal&quot;: &#123;</span><br><span class="line">        &quot;AWS&quot;: &quot;arn:aws:iam::[Account B]:role/InstanceProfile-for-infra-sts&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;Action&quot;: &quot;sts:AssumeRole&quot;,</span><br><span class="line">      &quot;Condition&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">JSON</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">resource &quot;aws_iam_role_policy&quot; &quot;ssm_cross_account&quot; &#123;</span><br><span class="line">  name   = &quot;ssm_cross_account&quot;</span><br><span class="line">  role   = aws_iam_role.ssm_cross_account.id</span><br><span class="line">  policy = &lt;&lt;JSON</span><br><span class="line">&#123;</span><br><span class="line">  &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">  &quot;Statement&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Action&quot;: &quot;sts:AssumeRole&quot;,</span><br><span class="line">        &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">        &quot;Resource&quot;: &quot;arn:aws:iam::[Account B]:role/InstanceProfile-for-infra-sts&quot;</span><br><span class="line">        &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">JSON</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">resource &quot;aws_iam_role_policy&quot; &quot;s3_cross_account&quot; &#123;</span><br><span class="line">  name   = &quot;handle-sshguard-ban-list&quot;</span><br><span class="line">  role   = aws_iam_role.ssm_cross_account.id</span><br><span class="line">  policy = &lt;&lt;JSON</span><br><span class="line">&#123;</span><br><span class="line">    &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">    &quot;Statement&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Action&quot;: &quot;s3:ListAllMyBuckets&quot;,</span><br><span class="line">            &quot;Resource&quot;: &quot;arn:aws:s3:::*&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Action&quot;: [</span><br><span class="line">                &quot;s3:ListBucket&quot;,</span><br><span class="line">                &quot;s3:GetBucketLocation&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Resource&quot;: &quot;arn:aws:s3:::sshguard-ban-list&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Action&quot;: [</span><br><span class="line">                &quot;s3:GetObject&quot;,</span><br><span class="line">                &quot;s3:PutObject&quot;,</span><br><span class="line">                &quot;s3:DeleteObject&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Resource&quot;: &quot;arn:aws:s3:::sshguard-ban-list/*&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">JSON</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Account-B"><a href="#Account-B" class="headerlink" title="Account B"></a>Account B</h3><h4 id="system-manager-1"><a href="#system-manager-1" class="headerlink" title="system manager"></a>system manager</h4><p>Account Aのlambdaによって呼び出され(assume role権限)、対象ec2インスタンスを操作するインターフェイスです</p><h4 id="ec2-1"><a href="#ec2-1" class="headerlink" title="ec2"></a>ec2</h4><p>対象インスタンスにamazon-ssm-agentの事前インストールが必要</p><h4 id="cloudwatch-events-今はevent-bridgeという名前になった"><a href="#cloudwatch-events-今はevent-bridgeという名前になった" class="headerlink" title="cloudwatch events(今はevent bridgeという名前になった)"></a>cloudwatch events(今はevent bridgeという名前になった)</h4><p>Account Aと同じく</p><h4 id="iam-sts-1"><a href="#iam-sts-1" class="headerlink" title="iam(sts)"></a>iam(sts)</h4><p>Account A時と逆で、Account Aに利用させるためのモノになります</p><h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><p>まとめてみたら、意外とめっちゃ長くなったね…<br>セキュアで別AWSアカウントのリソースを利用するには、assume roleは避けて通れない機能なので、ぜひ使ってみてくださーい！  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ようやく気が向いてて、何か書こうかと思っていたら、やっぱAWSネタになっちょうね。&lt;br&gt;今回は二つのAWSアカウントの間で、双方向assume roleでAWSリソースを操作する方法を試してみました。&lt;br&gt;良かったら、しばしお付き合いくださいましー&lt;/p&gt;
    
    </summary>
    
      <category term="infra" scheme="http://kuritan.github.io/categories/infra/"/>
    
    
      <category term="JP" scheme="http://kuritan.github.io/tags/JP/"/>
    
      <category term="aws" scheme="http://kuritan.github.io/tags/aws/"/>
    
  </entry>
  
  <entry>
    <title>新規GCPユーザにiam.serviceAccountUserロールを付与してね</title>
    <link href="http://kuritan.github.io/new-gcp-user-must-have-iam-serviceAccountUser-role/"/>
    <id>http://kuritan.github.io/new-gcp-user-must-have-iam-serviceAccountUser-role/</id>
    <published>2021-11-29T04:29:08.000Z</published>
    <updated>2023-02-07T06:29:58.261Z</updated>
    
    <content type="html"><![CDATA[<p>最近AWSだけではなく、GCPにも触るようになっちゃったので、個人メモとしてこちらに書き込もうと思っていました。<br>まずは、ユーザのIAM関連ですね。  </p><a id="more"></a><h2 id="イシュー確認"><a href="#イシュー確認" class="headerlink" title="イシュー確認"></a>イシュー確認</h2><p>早速ですが、同じGCPのProjectに複数のメンバーが作業するのは一般的かと思いますが、<br>新しいメンバーを招待し、必要最小限な権限を付与したつもりで、なぜかVMが作られないとのご連絡が入りました。  </p><p>エラーメッセージを確認しましょうー</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Operation <span class="built_in">type</span> [insert] failed with message <span class="string">"The user does not have access to service account '[PROJECT-NUMBER]-compute@developer.gserviceaccount.com'. User: '[user name]@[company domain]'. Ask a project owner to grant you the iam.serviceAccountUser role on the service account"</span></span><br></pre></td></tr></table></figure><p>むむ……一言いうと、さっぱりわからん……<br>なぜiam.serviceAccountUserのロールがここに出てくるの?おかしいくなぇ!?  </p><h2 id="解決策"><a href="#解決策" class="headerlink" title="解決策"></a>解決策</h2><p>色々模索した結果、該当ユーザに必要最小限な権限を付与した上、さらに「サービス アカウント ユーザー」のロールを付与しないと、うまく機能されません。<br>実際裏でAPIを実行する時、ユーザーアカウントではなく、サービスアカウントとしてパーミッションチェックを行いますので、サービスアカウントとして機能されるように権限を付与する必要があるようですね。<br><img src="gcp-iam-service-account.png" alt="サービス アカウント ユーザー">  </p><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>他のサービスはともかく、IAMの運用として、AWSの方が楽な気がすげぇしますよね……  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近AWSだけではなく、GCPにも触るようになっちゃったので、個人メモとしてこちらに書き込もうと思っていました。&lt;br&gt;まずは、ユーザのIAM関連ですね。  &lt;/p&gt;
    
    </summary>
    
      <category term="infra" scheme="http://kuritan.github.io/categories/infra/"/>
    
    
      <category term="JP" scheme="http://kuritan.github.io/tags/JP/"/>
    
      <category term="GCP" scheme="http://kuritan.github.io/tags/GCP/"/>
    
  </entry>
  
  <entry>
    <title>Capistranoデプロイする際にCould not parse PKey: no start lineで困った件</title>
    <link href="http://kuritan.github.io/could-not-parse-pkey-no-start-line/"/>
    <id>http://kuritan.github.io/could-not-parse-pkey-no-start-line/</id>
    <published>2021-07-08T05:15:54.000Z</published>
    <updated>2023-02-07T06:29:58.261Z</updated>
    
    <content type="html"><![CDATA[<p>最近AWSへの移設案件とかで結構忙しくなってますが、ちゃんとブログ更新しないと、<br>たぶん一気にダルくなって二度と更新しないじゃないかぁと思って、カキマス！  </p><a id="more"></a><h1 id="何があったの"><a href="#何があったの" class="headerlink" title="何があったの?"></a>何があったの?</h1><p>webアプリをAWSへ移設し、configなどを弄って、改めてdeployする際に、下記のいうなssh接続用のpublic鍵がうまく読み込まれないケースと遭遇しました。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ bundle install --path vendor/bundle</span><br><span class="line">$ bundle exec cap staging deploy</span><br><span class="line">(Backtrace restricted to imported tasks)</span><br><span class="line">cap aborted!</span><br><span class="line">SSHKit::Runner::ExecuteError: Exception while executing on host &lt;host-address&gt;: Could not parse PKey: no start line</span><br><span class="line"></span><br><span class="line">ArgumentError: Could not parse PKey: no start line</span><br><span class="line"></span><br><span class="line">Tasks: TOP =&gt; deploy:starting =&gt; deploy:init_permission</span><br><span class="line">(See full trace by running task with --trace)</span><br><span class="line">The deploy has failed with an error: Exception while executing on host &lt;host-address&gt;: Could not parse PKey: no start line</span><br></pre></td></tr></table></figure><p>一応、手元の環境を一通り確認したところ、特に不足な部分が見当たらなかったが、エラーは一貫として、強く自分主張をされています。<br>困ったなぁ〜  </p><h1 id="ググったら"><a href="#ググったら" class="headerlink" title="ググったら?"></a>ググったら?</h1><p>そりゃやりますよ〜<br>まず、こちらのページにたどり着けました。  </p><ul><li><a href="https://qiita.com/kadoppe/items/ed1e9c6b75cb7e676322" target="_blank" rel="noopener">Capistranoでの配備時に<code>Could not parse PKey: no start line</code>エラーが発生した時の対処法</a></li></ul><p>むむ……<br>でもね<br>public鍵ちゃんとありますよ〜<br>なんだろう……  </p><p>ここで、githubのissueやstackoverflowもいろいろ探していたが、収穫ゼロで、路頭に迷う状態になっちゃいました。  </p><h2 id="まさか…お前だと"><a href="#まさか…お前だと" class="headerlink" title="まさか…お前だと!?"></a>まさか…お前だと!?</h2><p>探してる途中で、パット見関係ない記事を見つかったが、よく読んでると、ひょっとしたらssh agentに秘密鍵を登録しないとそもそも鍵が特定されてないと気づき、トライしてみました。  </p><ul><li><a href="https://qiita.com/sonots/items/a6dec06f95fca4757d4a" target="_blank" rel="noopener">macOS で再起動しても ssh agent に秘密鍵を保持させ続ける二つの方法</a></li></ul><p>結果……大正解だ！！！！！！  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br><span class="line">$ bundle exec cap staging deploy</span><br><span class="line">...</span><br><span class="line">......</span><br><span class="line">.........</span><br><span class="line">INFO [43d9f003] Finished in 0.045 seconds with exit status 0 (successful).</span><br></pre></td></tr></table></figure><p>デプロイできた！！！<br>該当記事に書かれた通り、macだと再起動するたびにssh-add登録が無効となるんので、助言に甘えて、セッティングをしました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.ssh/config</span><br><span class="line">Host *</span><br><span class="line">  UseKeychain yes</span><br><span class="line">  AddKeysToAgent yes</span><br><span class="line"></span><br><span class="line">$ ssh-add -K ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p><strong>意外とした落とし穴で、かなり焦ったが、ちゃんと経緯をここで書いて、どなたの助けになれればと祈るばかりです。</strong>  </p><p><strong>ではでは</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近AWSへの移設案件とかで結構忙しくなってますが、ちゃんとブログ更新しないと、&lt;br&gt;たぶん一気にダルくなって二度と更新しないじゃないかぁと思って、カキマス！  &lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="http://kuritan.github.io/categories/dev/"/>
    
    
      <category term="JP" scheme="http://kuritan.github.io/tags/JP/"/>
    
      <category term="ruby" scheme="http://kuritan.github.io/tags/ruby/"/>
    
      <category term="CI/CD" scheme="http://kuritan.github.io/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>chatworkとlambdaでセルフサービスしようぜ</title>
    <link href="http://kuritan.github.io/selfservice-with-chatworkwebhook-apigateway-and-lambda/"/>
    <id>http://kuritan.github.io/selfservice-with-chatworkwebhook-apigateway-and-lambda/</id>
    <published>2021-04-21T02:52:17.000Z</published>
    <updated>2023-02-07T06:29:58.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ニーズ"><a href="#ニーズ" class="headerlink" title="ニーズ"></a>ニーズ</h1><p>DoS攻撃などを防止するため、sshguardを標準装備として各本番サーバにはインストールされている。<br>昨今、リモートワークが当たり前になって、従業員からのアクセスをBANされたケースが多発され（特にgitまわり）、<br>そのBANのIPの解除はSREメンバーが都度手動でしないといけない状況になっています。<br>エンジニアのtoil撲滅の一環として、これらの作業をセルフサービス化としたいのは今回のゴールである。  </p><a id="more"></a><h1 id="考慮ポイント"><a href="#考慮ポイント" class="headerlink" title="考慮ポイント"></a>考慮ポイント</h1><ul><li>対象</li><li>コスト</li><li>実装方法<ul><li>webサービス<ul><li>実装が遅い</li><li>自前でユーザ認証する必要あり（リモートワーク前提ので）</li><li>実装まわりで経験値を大量ゲットできる</li></ul></li><li>botユーザ(chatwork)<ul><li>実装が速い</li><li>ユーザ認証不要（すでにchatworkの方で認証済み）</li><li>実装まわりで経験値少量ゲット</li></ul></li></ul></li></ul><h1 id="アーキテクチャ"><a href="#アーキテクチャ" class="headerlink" title="アーキテクチャ"></a>アーキテクチャ</h1><p><img src="%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3.png" alt="Remote-Containers"></p><h2 id="TO-bot"><a href="#TO-bot" class="headerlink" title="TO:bot"></a>TO:bot</h2><p>専用のbotユーザにTOをつけて話しかけると、webhookが叩かれ、apigatewayに送信</p><ul><li>IPアドレスのみの場合、IP一覧チェックを行い、解除&amp;更新もする</li><li>BAN部屋のメッセージを引用された場合、IP一覧チェックを行い、解除&amp;更新もする</li><li>それ以外の場合、デフォルトhelpメッセージを返す</li></ul><h2 id="APIgateway-lambda"><a href="#APIgateway-lambda" class="headerlink" title="APIgateway - lambda"></a>APIgateway - lambda</h2><p>chatwork webhookから受信し、lambdaでtoken検証をする。<br>問題ないの場合、bodyの解析を行う</p><ul><li>IPアドレスのみの場合、IP一覧チェックを行い、解除&amp;更新もする<ul><li>ない場合は、その旨をchatworkに返す</li></ul></li><li>BAN部屋のメッセージを引用された場合、IP一覧チェックを行い、解除&amp;更新もする<ul><li>ない場合は、その旨をchatworkに返す</li></ul></li><li>それ以外の場合、デフォルトhelpメッセージを返す</li></ul><h3 id="実装ポイント"><a href="#実装ポイント" class="headerlink" title="実装ポイント"></a>実装ポイント</h3><ul><li>timeout 3s要注意(apigateway仕様)</li><li>systemmanagerとs3のSDKを使って、shell実行やipチェックを行う</li><li>返信メッセージを丁寧に表現</li></ul><h2 id="一覧チェック"><a href="#一覧チェック" class="headerlink" title="一覧チェック"></a>一覧チェック</h2><p>現在BANされているIPアドレスの一覧リストをテキストファイルとして、s3の指定場所に格納<br>lambdaでs3 SDK経由、都度指定されたIPが、リストに載ってるかをチェック</p><ul><li>載ってる場合、trueをlambdaに返し、その解除&amp;更新もする</li><li>載ってない場合、falseをlambdaに返し、その旨をchatworkに返す</li></ul><h2 id="kick-system-manager-run-command"><a href="#kick-system-manager-run-command" class="headerlink" title="kick system manager run command"></a>kick system manager run command</h2><p>lambdaでsystemmanager SDKを利用し、指定EC2インスタンスにて、shell commandを実行</p><h2 id="shell実行-解除-amp-更新"><a href="#shell実行-解除-amp-更新" class="headerlink" title="shell実行(解除&amp;更新)"></a>shell実行(解除&amp;更新)</h2><ul><li>iptables -L sshguard –line-numbers -n | grep #BANされたIP# | cut -d’ ‘ -f1 | xargs -L 1 iptables -D sshguard </li><li>systemctl restart sshguard</li><li>iptables -L sshguard –line-numbers -n &gt; /tmp/sshguard_ban_ip/<code>hostname</code>.txt</li><li>aws s3 sync /tmp/sshguard_ban_ip/ s3://#S3の指定bucket名#/<br>実行成功/失敗後、その旨をchatworkに返す</li></ul><h2 id="レスポンス"><a href="#レスポンス" class="headerlink" title="レスポンス"></a>レスポンス</h2><p>↑の各ステップでのレスポンス</p><h2 id="cloudwatch-event-kick-system-manager-run-command"><a href="#cloudwatch-event-kick-system-manager-run-command" class="headerlink" title="cloudwatch event kick system manager run command"></a>cloudwatch event kick system manager run command</h2><p>短時間/回で、BANされたIPアドレス一覧を最新化する</p><h2 id="shell実行-更新"><a href="#shell実行-更新" class="headerlink" title="shell実行(更新)"></a>shell実行(更新)</h2><ul><li>iptables -L sshguard –line-numbers -n &gt; /tmp/sshguard_ban_ip/<code>hostname</code>.log</li><li>aws s3 sync /tmp/sshguard_ban_ip/ #S3の指定bucket名#</li></ul><h2 id="一覧最新化"><a href="#一覧最新化" class="headerlink" title="一覧最新化"></a>一覧最新化</h2><p>↑での結果が反映される</p><p>ついでに、s3バケットを静的コンテンツとして表示させるのもあり</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;ja&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;CONTENT-TYPE&quot; cont</span><br><span class="line">ent=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;BAN IP List&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;OBJECT DATA=&quot;./&lt;filename.txt&gt;&quot;TYPE=&quot;text/plain&quot; WIDTH=&quot;100%&quot; HEIGHT=&quot;100%&quot;&gt;&lt;/OBJECT&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="成果物"><a href="#成果物" class="headerlink" title="成果物"></a>成果物</h1><p><strong>構成は全部terraformに載っており、lambda functionはpython 3.6を使わせていただきました。</strong></p><h2 id="terraformコード"><a href="#terraformコード" class="headerlink" title="terraformコード"></a>terraformコード</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># for sshguard self release</span><br><span class="line">#</span><br><span class="line">locals &#123;</span><br><span class="line">  ip_tables_chain_path = &quot;/tmp&quot;</span><br><span class="line">  # EC2 instance&apos;s name for running release action</span><br><span class="line">  target_instance_name = &quot;&quot;</span><br><span class="line">  ban_ip_pool = format(&quot;%s/%s.txt&quot;, local.ip_tables_chain_path, local.target_instance_name)</span><br><span class="line">  # S3 bucket name for contain ban list</span><br><span class="line">  s3_bucket_name = &quot;&quot;</span><br><span class="line">  tag_key = &quot;tag:bot&quot;</span><br><span class="line">  tag_value = &quot;release-sshguard&quot;</span><br><span class="line">&#125;</span><br><span class="line">resource &quot;aws_api_gateway_rest_api&quot; &quot;release-sshguard&quot; &#123;</span><br><span class="line">  name = &quot;release-sshguard&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_api_gateway_resource&quot; &quot;proxy&quot; &#123;</span><br><span class="line">   rest_api_id = aws_api_gateway_rest_api.release-sshguard.id</span><br><span class="line">   parent_id   = aws_api_gateway_rest_api.release-sshguard.root_resource_id</span><br><span class="line">   path_part   = &quot;&#123;proxy+&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_api_gateway_method&quot; &quot;proxyMethod&quot; &#123;</span><br><span class="line">   rest_api_id   = aws_api_gateway_rest_api.release-sshguard.id</span><br><span class="line">   resource_id   = aws_api_gateway_resource.proxy.id</span><br><span class="line">   http_method   = &quot;ANY&quot;</span><br><span class="line">   authorization = &quot;NONE&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_api_gateway_integration&quot; &quot;release-sshguard&quot; &#123;</span><br><span class="line">   rest_api_id = aws_api_gateway_rest_api.release-sshguard.id</span><br><span class="line">   resource_id = aws_api_gateway_method.proxyMethod.resource_id</span><br><span class="line">   http_method = aws_api_gateway_method.proxyMethod.http_method</span><br><span class="line"></span><br><span class="line">   integration_http_method = &quot;POST&quot;</span><br><span class="line">   type                    = &quot;AWS_PROXY&quot;</span><br><span class="line">   uri                     = aws_lambda_function.release-sshguard.invoke_arn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_api_gateway_method&quot; &quot;proxy_root&quot; &#123;</span><br><span class="line">   rest_api_id   = aws_api_gateway_rest_api.release-sshguard.id</span><br><span class="line">   resource_id   = aws_api_gateway_rest_api.release-sshguard.root_resource_id</span><br><span class="line">   http_method   = &quot;ANY&quot;</span><br><span class="line">   authorization = &quot;NONE&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_api_gateway_integration&quot; &quot;lambda_root&quot; &#123;</span><br><span class="line">   rest_api_id = aws_api_gateway_rest_api.release-sshguard.id</span><br><span class="line">   resource_id = aws_api_gateway_method.proxy_root.resource_id</span><br><span class="line">   http_method = aws_api_gateway_method.proxy_root.http_method</span><br><span class="line"></span><br><span class="line">   integration_http_method = &quot;POST&quot;</span><br><span class="line">   type                    = &quot;AWS_PROXY&quot;</span><br><span class="line">   uri                     = aws_lambda_function.release-sshguard.invoke_arn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">resource &quot;aws_api_gateway_deployment&quot; &quot;apideploy&quot; &#123;</span><br><span class="line">   depends_on = [</span><br><span class="line">     aws_api_gateway_integration.release-sshguard,</span><br><span class="line">     aws_api_gateway_integration.lambda_root,</span><br><span class="line">   ]</span><br><span class="line"></span><br><span class="line">   rest_api_id = aws_api_gateway_rest_api.release-sshguard.id</span><br><span class="line">   stage_name  = &quot;test&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_lambda_function&quot; &quot;release-sshguard&quot; &#123;</span><br><span class="line">  function_name     = &quot;release-sshguard&quot;</span><br><span class="line">  handler           = &quot;release-sshguard.lambda_handler&quot;</span><br><span class="line">  s3_bucket         = local.lambda_bucket</span><br><span class="line">  s3_key            = local.lambda_main_key</span><br><span class="line">  s3_object_version = data.aws_s3_bucket_object.lambda_main.version_id</span><br><span class="line"></span><br><span class="line">  layers = [aws_lambda_layer_version.system-lib.arn]</span><br><span class="line"></span><br><span class="line">  memory_size = 512</span><br><span class="line">  timeout     = 3</span><br><span class="line"></span><br><span class="line">  runtime = local.lambda_runtime</span><br><span class="line">  role    = &quot;arn:aws:iam::596431367989:role/lambda_basic_vpc_execution&quot;</span><br><span class="line"></span><br><span class="line">  environment &#123;</span><br><span class="line">    variables = &#123;</span><br><span class="line">      ec2_tag_key = local.tag_key</span><br><span class="line">      ec2_tag_value = local.tag_value</span><br><span class="line">      ban_list_s3_bucket_name = local.s3_bucket_name</span><br><span class="line">      ec2_hostname = local.target_instance_name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_cloudwatch_log_group&quot; &quot;release-sshguard&quot; &#123;</span><br><span class="line">  name              = format(&quot;%s%s&quot;, local.lambda_log_group_prefix, &quot;release-sshguard&quot;)</span><br><span class="line">  retention_in_days = 7</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_lambda_permission&quot; &quot;release-sshguard&quot; &#123;</span><br><span class="line">  function_name = aws_lambda_function.release-sshguard.arn</span><br><span class="line">  principal     = &quot;apigateway.amazonaws.com&quot;</span><br><span class="line">  action        = &quot;lambda:InvokeFunction&quot;</span><br><span class="line"></span><br><span class="line">  source_arn = &quot;$&#123;aws_api_gateway_rest_api.release-sshguard.execution_arn&#125;/*/*&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_s3_bucket&quot; &quot;ban-list&quot; &#123;</span><br><span class="line">    bucket = local.s3_bucket_name</span><br><span class="line">    acl    = &quot;private&quot;</span><br><span class="line"></span><br><span class="line">    website &#123;</span><br><span class="line">        index_document = &quot;index.html&quot;</span><br><span class="line">        error_document = &quot;index.html&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    policy = &lt;&lt;EOS</span><br><span class="line">&#123;</span><br><span class="line">    &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">    &quot;Statement&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Sid&quot;: &quot;Office&quot;,</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Principal&quot;: &quot;*&quot;,</span><br><span class="line">            &quot;Action&quot;: &quot;s3:*&quot;,</span><br><span class="line">            &quot;Resource&quot;: &quot;arn:aws:s3:::$&#123;local.s3_bucket_name&#125;/*&quot;,</span><br><span class="line">            &quot;Condition&quot;: &#123;</span><br><span class="line">                &quot;IpAddress&quot;: &#123;</span><br><span class="line">                    &quot;aws:SourceIp&quot;: [</span><br><span class="line">                        &quot;your branch&apos;s ip address&quot;,</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOS</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">output &quot;api_url&quot; &#123;</span><br><span class="line">  value = aws_api_gateway_deployment.apideploy.invoke_url</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># update ban ip list via cloudwatch event</span><br><span class="line">#</span><br><span class="line">resource &quot;aws_iam_role&quot; &quot;update-sshguard-ban-ip&quot; &#123;</span><br><span class="line">  </span><br><span class="line">  name = &quot;update-sshguard-ban-ip&quot;</span><br><span class="line">  assume_role_policy = &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">      &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">      &quot;Statement&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;Action&quot;: &quot;sts:AssumeRole&quot;,</span><br><span class="line">          &quot;Principal&quot;: &#123;</span><br><span class="line">            &quot;Service&quot;: &quot;events.amazonaws.com&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">          &quot;Sid&quot;: &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_iam_role_policy&quot; &quot;update-sshguard-ban-ip&quot; &#123;</span><br><span class="line">  name   = &quot;update-sshguard-ban-ip_additional&quot;</span><br><span class="line">  role   = aws_iam_role.update-sshguard-ban-ip.id</span><br><span class="line">  policy = &lt;&lt;JSON</span><br><span class="line">&#123;</span><br><span class="line">  &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">  &quot;Statement&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;Action&quot;: &quot;ssm:*&quot;,</span><br><span class="line">      &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">      &quot;Resource&quot;: &quot;*&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">JSON</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">resource &quot;aws_cloudwatch_event_target&quot; &quot;update-sshguard-ban-ip&quot; &#123;</span><br><span class="line">  target_id = &quot;UpdateBanIPList&quot;</span><br><span class="line">  arn       = &quot;arn:aws:ssm:$&#123;var.aws_region&#125;::document/AWS-RunShellScript&quot;</span><br><span class="line">  input     = &lt;&lt;JSON</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;commands&quot;: [</span><br><span class="line">      &quot;echo `date` &gt; $&#123;local.ban_ip_pool&#125;&quot;,</span><br><span class="line">      &quot;echo `hostname` &gt;&gt; $&#123;local.ban_ip_pool&#125;&quot;,</span><br><span class="line">      &quot;iptables -L sshguard --line-numbers -n &gt;&gt; $&#123;local.ban_ip_pool&#125;&quot;,</span><br><span class="line">      &quot;aws s3 cp $&#123;local.ban_ip_pool&#125; s3://$&#123;local.s3_bucket_name&#125;/&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  JSON</span><br><span class="line"></span><br><span class="line">  rule      = aws_cloudwatch_event_rule.lambda_every_one_minute.name</span><br><span class="line">  role_arn  = aws_iam_role.update-sshguard-ban-ip.arn</span><br><span class="line"></span><br><span class="line">  run_command_targets &#123;</span><br><span class="line">    key    = &quot;tag:bot&quot;</span><br><span class="line">    values = [local.tag_value]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lambda-functionコード"><a href="#lambda-functionコード" class="headerlink" title="lambda functionコード"></a>lambda functionコード</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> ipaddress</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">ec2 = boto3.client(<span class="string">'ec2'</span>)</span><br><span class="line">ssm = boto3.client(<span class="string">'ssm'</span>, region_name=os.environ.get(<span class="string">'region_name'</span>))</span><br><span class="line">s3 = boto3.resource(<span class="string">'s3'</span>)</span><br><span class="line"></span><br><span class="line">s3_bucket_name = os.environ.get(<span class="string">'ban_list_s3_bucket_name'</span>)</span><br><span class="line">hostname = os.environ.get(<span class="string">'ec2_hostname'</span>)</span><br><span class="line">host_pool_filename = <span class="string">"%s.txt"</span> % hostname</span><br><span class="line">tag_key = os.environ.get(<span class="string">'ec2_tag_key'</span>)</span><br><span class="line">tag_value = os.environ.get(<span class="string">'ec2_tag_value'</span>)</span><br><span class="line">ip_tables_chain_path = <span class="string">'/tmp'</span></span><br><span class="line">ban_ip_pool = <span class="string">"%s/%s.txt"</span> % (ip_tables_chain_path, hostname)</span><br><span class="line"></span><br><span class="line"><span class="comment"># your token</span></span><br><span class="line">API_TOKEN = <span class="string">''</span></span><br><span class="line">endpoint = <span class="string">'https://api.chatwork.com/v2'</span></span><br><span class="line">request_timeout = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambda_handler</span><span class="params">(event, context)</span>:</span></span><br><span class="line">    data = json.dumps(event)</span><br><span class="line">    j = json.loads(data)</span><br><span class="line">    webhook_body = eval(j[<span class="string">"body"</span>])</span><br><span class="line">    from_account_id = webhook_body[<span class="string">"webhook_event"</span>][<span class="string">"from_account_id"</span>]</span><br><span class="line">    room_id = webhook_body[<span class="string">"webhook_event"</span>][<span class="string">"room_id"</span>]</span><br><span class="line">    message_id = webhook_body[<span class="string">"webhook_event"</span>][<span class="string">"message_id"</span>]</span><br><span class="line">    webhook_text = webhook_body[<span class="string">"webhook_event"</span>][<span class="string">"body"</span>]</span><br><span class="line"></span><br><span class="line">    request_ip = <span class="string">""</span></span><br><span class="line">    open(ban_ip_pool, <span class="string">'w'</span>).close()</span><br><span class="line">    s3.meta.client.download_file(s3_bucket_name, host_pool_filename, ban_ip_pool)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> is_valid_quote(webhook_text) <span class="keyword">is</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">"Mostly received a quote message"</span>)</span><br><span class="line">        temp_file_path = <span class="string">"/tmp/ban_ip_message.txt"</span></span><br><span class="line">        <span class="keyword">with</span> open(temp_file_path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            print(webhook_text, file=f)</span><br><span class="line">        filtered_ip_address = filter_ip_address_from_tempfile(temp_file_path)</span><br><span class="line">        <span class="keyword">if</span> is_valid_ip(filtered_ip_address) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">True</span>:</span><br><span class="line">            print(<span class="string">"Do not find IP address from quote message."</span>)</span><br><span class="line">            print(<span class="string">"Sent help message."</span>)</span><br><span class="line">            bot_message(from_account_id, room_id, message_id, <span class="string">"help"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"ip valid succeed."</span>)</span><br><span class="line">            request_ip = filtered_ip_address</span><br><span class="line">    <span class="keyword">elif</span> pick_up_raw_ip(webhook_text) <span class="keyword">is</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> is_valid_ip(raw_ip) <span class="keyword">is</span> <span class="keyword">True</span>:</span><br><span class="line">            print(<span class="string">"Mostly received a single IP"</span>)</span><br><span class="line">            print(<span class="string">"ip valid succeed."</span>)</span><br><span class="line">            request_ip = raw_ip</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"ip invalid."</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"ありがとう"</span> <span class="keyword">in</span> webhook_text <span class="keyword">or</span> <span class="string">"thank"</span> <span class="keyword">in</span> webhook_text:</span><br><span class="line">                print(<span class="string">"Mostly got a thank you message."</span>)</span><br><span class="line">                bot_message(from_account_id, room_id, message_id, <span class="string">"pleasure"</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                bot_message(from_account_id, room_id, message_id, <span class="string">"help"</span>)</span><br><span class="line">                print(<span class="string">"Sent help message."</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bot_message(from_account_id, room_id, message_id, <span class="string">"help"</span>)</span><br><span class="line">        print(<span class="string">"Sent help message."</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> is_request_ip_existed(request_ip, ban_ip_pool) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">"Request IP address has not existed on %s."</span> % ban_ip_pool)</span><br><span class="line">        <span class="comment"># bot返信（from_account_idに）</span></span><br><span class="line">        bot_message(from_account_id, room_id, message_id, <span class="string">"nohit"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Request IP address has existed on %s."</span> % ban_ip_pool)</span><br><span class="line">        send_ssm_cmd(request_ip)</span><br><span class="line">        <span class="comment"># bot返信（from_account_idに）</span></span><br><span class="line">        bot_message(from_account_id, room_id, message_id, <span class="string">"hit"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'End'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pick_up_raw_ip</span><span class="params">(post_message: str)</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">global</span> raw_ip</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        raw_ip = post_message.rsplit(<span class="string">'\n'</span>, <span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">        print(raw_ip)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">except</span> (ValueError, IndexError):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid_ip</span><span class="params">(ip: str)</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ipaddress.ip_address(ip)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid_quote</span><span class="params">(message: str)</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"[qt]"</span> <span class="keyword">in</span> message:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_ip_address_from_tempfile</span><span class="params">(tempfile_path: str)</span> -&gt; str:</span></span><br><span class="line">    <span class="keyword">with</span> open(tempfile_path) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">    lines_strip = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        lines_strip.append(line.strip())</span><br><span class="line">    l_message = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines_strip:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Message    :'</span> <span class="keyword">in</span> line:</span><br><span class="line">            l_message.append(line)</span><br><span class="line">    l_ip = <span class="string">''</span>.join(l_message).split(<span class="string">':'</span>)</span><br><span class="line">    str_ip = <span class="string">''</span>.join(l_ip[<span class="number">1</span>]).replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> str_ip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_request_ip_existed</span><span class="params">(request_ip: str, ban_ip_pool: str)</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">with</span> open(ban_ip_pool) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">        print(lines)</span><br><span class="line">    lines_strip = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        lines_strip.append(line.strip())</span><br><span class="line">    l_message = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines_strip:</span><br><span class="line">        <span class="keyword">if</span> request_ip <span class="keyword">in</span> line:</span><br><span class="line">            l_message.append(line)</span><br><span class="line">            print(l_message)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_ssm_cmd</span><span class="params">(ban_ip: str)</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># EC2 instances which tagged with release-sshguard</span></span><br><span class="line">        ec2_resp = ec2.describe_instances(Filters=[&#123;<span class="string">'Name'</span>: tag_key, <span class="string">'Values'</span>: [tag_value]&#125;])</span><br><span class="line"></span><br><span class="line">        ec2_count = len(ec2_resp[<span class="string">'Reservations'</span>])</span><br><span class="line">        <span class="keyword">if</span> ec2_count == <span class="number">0</span>:</span><br><span class="line">            logger.info(<span class="string">'No EC2 is running'</span>)</span><br><span class="line"></span><br><span class="line">        instances = [i[<span class="string">"InstanceId"</span>] <span class="keyword">for</span> r <span class="keyword">in</span> ec2_resp[<span class="string">"Reservations"</span>] <span class="keyword">for</span> i <span class="keyword">in</span> r[<span class="string">"Instances"</span>]]</span><br><span class="line"></span><br><span class="line">        ssm.send_command(</span><br><span class="line">            InstanceIds=instances,</span><br><span class="line">            DocumentName=<span class="string">"AWS-RunShellScript"</span>,</span><br><span class="line">            Parameters=&#123;</span><br><span class="line">                <span class="string">"commands"</span>: [</span><br><span class="line">                    <span class="string">"echo %s"</span> % ban_ip,</span><br><span class="line">                    <span class="string">"echo `date` &gt; %s"</span> % ban_ip_pool,</span><br><span class="line">                    <span class="string">"echo `hostname` &gt;&gt; %s"</span> % ban_ip_pool,</span><br><span class="line">                    <span class="string">"iptables -L sshguard --line-numbers -n | grep %s | cut -d' ' -f1 | xargs -L 1 iptables -D sshguard"</span> % ban_ip,</span><br><span class="line">                    <span class="string">"systemctl restart sshguard"</span>,</span><br><span class="line">                    <span class="string">"iptables -L sshguard --line-numbers -n &gt;&gt; %s"</span> % ban_ip_pool,</span><br><span class="line">                    <span class="string">"aws s3 cp %s s3://%s/"</span> % (ban_ip_pool, s3_bucket_name),</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"executionTimeout"</span>: [<span class="string">"3600"</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">        )</span><br><span class="line">        print(<span class="string">"Released ip address %s"</span> % ban_ip)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(e)</span><br><span class="line">        <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bot_message</span><span class="params">(account_id: int, room_id: int, message_id: str, message_type: str)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> message_type <span class="keyword">is</span> <span class="string">'pleasure'</span>:</span><br><span class="line">        message = <span class="string">"Always a great pleasure."</span></span><br><span class="line">    <span class="keyword">elif</span> message_type <span class="keyword">is</span> <span class="string">'nohit'</span>:</span><br><span class="line">        message = <span class="string">'''</span></span><br><span class="line"><span class="string">[info][title]作業失敗[/title]</span></span><br><span class="line"><span class="string">BANリストに載ってないみたいので、</span></span><br><span class="line"><span class="string">もう一度接続をお試しください。</span></span><br><span class="line"><span class="string">駄目でしたら、SREメンバーまでご連絡ください。[/info]</span></span><br><span class="line"><span class="string">'''</span>.strip()</span><br><span class="line">    <span class="keyword">elif</span> message_type <span class="keyword">is</span> <span class="string">"hit"</span>:</span><br><span class="line">        message = <span class="string">'''</span></span><br><span class="line"><span class="string">[info][title]作業成功[/title]</span></span><br><span class="line"><span class="string">解除しました!!!</span></span><br><span class="line"><span class="string">Retryをお願いしまーす[/info]</span></span><br><span class="line"><span class="string">'''</span>.strip()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        message = <span class="string">'''</span></span><br><span class="line"><span class="string">[info][title]もしやBAN解除したいの？[/title]</span></span><br><span class="line"><span class="string">- SSHブロック通知部屋の該当BAN通知メッセージを引用し、私にTOしてください</span></span><br><span class="line"><span class="string">- 直接Global IPを私にTOしてください</span></span><br><span class="line"><span class="string">    - https://www.cman.jp/network/support/go_access.cgi</span></span><br><span class="line"><span class="string">    - ここで表示されたIPの事</span></span><br><span class="line"><span class="string">- それでも駄目だったら、SREメンバーにお尋ねください[/info]</span></span><br><span class="line"><span class="string">'''</span>.strip()</span><br><span class="line"></span><br><span class="line">    reply_message = <span class="string">"[rp aid=%s to=%s-%s]%s"</span> % (account_id, room_id, message_id, message)</span><br><span class="line">    post_message_url = <span class="string">"%s/rooms/%s/messages"</span> % (endpoint, room_id)</span><br><span class="line">    headers = &#123;<span class="string">'X-ChatWorkToken'</span>: API_TOKEN&#125;</span><br><span class="line">    params = &#123;<span class="string">'body'</span>: reply_message&#125;</span><br><span class="line"></span><br><span class="line">    res = requests.post(post_message_url, headers=headers, data=params)</span><br><span class="line">    res.raise_for_status()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(lambda_handler(<span class="string">"event"</span>, <span class="string">"context"</span>))</span><br></pre></td></tr></table></figure><p>誰かのご参考になって頂ければ幸いです。<br>ではでは〜</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ニーズ&quot;&gt;&lt;a href=&quot;#ニーズ&quot; class=&quot;headerlink&quot; title=&quot;ニーズ&quot;&gt;&lt;/a&gt;ニーズ&lt;/h1&gt;&lt;p&gt;DoS攻撃などを防止するため、sshguardを標準装備として各本番サーバにはインストールされている。&lt;br&gt;昨今、リモートワークが当たり前になって、従業員からのアクセスをBANされたケースが多発され（特にgitまわり）、&lt;br&gt;そのBANのIPの解除はSREメンバーが都度手動でしないといけない状況になっています。&lt;br&gt;エンジニアのtoil撲滅の一環として、これらの作業をセルフサービス化としたいのは今回のゴールである。  &lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="http://kuritan.github.io/categories/dev/"/>
    
    
      <category term="JP" scheme="http://kuritan.github.io/tags/JP/"/>
    
      <category term="python" scheme="http://kuritan.github.io/tags/python/"/>
    
      <category term="aws" scheme="http://kuritan.github.io/tags/aws/"/>
    
  </entry>
  
  <entry>
    <title>python2のサポートが切れたget-pipスクリプト</title>
    <link href="http://kuritan.github.io/watch-your-get-pip-script/"/>
    <id>http://kuritan.github.io/watch-your-get-pip-script/</id>
    <published>2021-01-29T02:29:40.000Z</published>
    <updated>2023-02-07T06:29:58.265Z</updated>
    
    <content type="html"><![CDATA[<p>超〜久しぶりの更新となります。<br>今回は業務上で実際にあっていた、pythonのパッケージ管理システムのお話で花を咲かせようかと考えていますので、しばしお付き合いくださいね〜  </p><a id="more"></a><h1 id="何があったの？"><a href="#何があったの？" class="headerlink" title="何があったの？"></a>何があったの？</h1><p>先日、弊社多数サービスの本番環境において、スケールアウトしたEC2インスタンスがunhealthy状態で、ユーザからログインできない声が出てきました。<br>休日でありながら、幸いコロナの流行りで、行くところもないし、家に引きこもり中の自分は、SREとしてトラブルシューティング開始しました。  </p><h2 id="問題点"><a href="#問題点" class="headerlink" title="問題点"></a>問題点</h2><ul><li>LBから見ると殆どunhealthy状態(1~2台除く)</li><li>healthyになっていたインスタンスは当日立ち上げのインスタンスではない</li><li>当日スケールアウトされたEC2インスタンスはデプロイされてなかった</li><li>内製プロビジョニングツールのログをチェックすると、プロビジョニングがエラーで中断</li><li>エラー内容はpip installまわり（invalid syntax）</li><li>実機でpip listを打っても同じinvalid syntaxのエラー</li></ul><p>ここまで確認したら、問題はだいぶ絞られましたね。<br>むむ…pipね…お恥ずかしいのですが、うちの内製プロビジョニングツールはpython2.7依存(原因は後述)で、何か臭うなぁ〜  </p><p>エラーメッセージの一部を載せますが、ここで、ヒントとなっていたのは<br><strong>f-string</strong> だ！  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">:stderr: Traceback (most recent call last):</span><br><span class="line">  File &quot;/usr/bin/pip2&quot;, line 7, in &lt;module&gt;</span><br><span class="line">    from pip._internal.cli.main import main</span><br><span class="line">  File &quot;/usr/lib/python2.7/site-packages/pip/_internal/cli/main.py&quot;, line 8, in &lt;module&gt;</span><br><span class="line">    from pip._internal.cli.autocompletion import autocomplete</span><br><span class="line">  File &quot;/usr/lib/python2.7/site-packages/pip/_internal/cli/autocompletion.py&quot;, line 9, in &lt;module&gt;</span><br><span class="line">    from pip._internal.cli.main_parser import create_main_parser</span><br><span class="line">  File &quot;/usr/lib/python2.7/site-packages/pip/_internal/cli/main_parser.py&quot;, line 86</span><br><span class="line">    msg = [f&apos;unknown command &quot;&#123;cmd_name&#125;&quot;&apos;]</span><br><span class="line">                                         ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p><strong>f-string</strong><br>だからで何が？さきほども申し上げましたが、弊社の内製プロビジョニングツールはpython2.7依存ですが、<strong>f-string</strong><br>というpythonのfeatureは3.6以後にリリースされたもので、ここで<br><strong>f-string</strong><br>のinvalid syntaxが出てくるのは極めて不自然なことが明白である。  </p><p>ここで、疑惑の目がpip自体に向けられました。<br>しばらくgoogleセンセイに聞いてみたら、こんな記事に辿り着けました。<br><a href="https://mail.python.org/archives/list/python-announce-list@python.org/thread/XIPLSUI3IID33J5BWSOOPLE7IQ775HLP/" target="_blank" rel="noopener">Announcement: pip 21.0 has now been released</a><br><img src="pip.jpg" alt="Announcement"><br>なに？なに？  </p><p>ハイライトとしては2点だけ</p><ul><li>Removal of Python 2.7 and 3.5 support.</li><li>Dropped support for legacy cache entries from pip &lt; 20.0.</li></ul><p>つまり、python2.7と3.5のサポートが終了し、レガシーcacheのサポートも終了  </p><p>これだ！とひらめいた自分でした。<br>該当記事をよく読んでみたら、下記記述があって、該当リンクでget-pip.pyスクリプトを入手し、無事問題解決に至りました。</p><blockquote><p>A Python 2.7 compatible version of get-pip.py is available at <a href="https://bootstrap.pypa.io/2.7/" target="_blank" rel="noopener">https://bootstrap.pypa.io/2.7/</a>.</p></blockquote><h1 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h1><p>インシデント前日で、最新のget-pip.pyがpython2.7との互換性が失い、<br>インシデント当日スケールアウトしたEC2インスタンスが、内製プロビジョニングツールの駆使下、pip経由でawscliなどのツールをインストールしようとした際、見事エラーとなり、<br>その後に続くデプロイも失敗し、<br>最終的に、サービスログイン不能な状態に落ちた。</p><h1 id="教訓"><a href="#教訓" class="headerlink" title="教訓"></a>教訓</h1><ul><li>python2.7そろそろやめようぜ</li><li>SREのon-call制度はそこそこ意味があるように思っていた</li></ul><h1 id="言い訳"><a href="#言い訳" class="headerlink" title="言い訳"></a>言い訳</h1><p>python3にしたいよ〜したいけど、<br>版元様の指定td-agentプラグイン(お金まわりのログ転送)はpython2.7依存で、こちらからは何もできないもん〜</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;超〜久しぶりの更新となります。&lt;br&gt;今回は業務上で実際にあっていた、pythonのパッケージ管理システムのお話で花を咲かせようかと考えていますので、しばしお付き合いくださいね〜  &lt;/p&gt;
    
    </summary>
    
      <category term="infra" scheme="http://kuritan.github.io/categories/infra/"/>
    
    
      <category term="JP" scheme="http://kuritan.github.io/tags/JP/"/>
    
      <category term="python" scheme="http://kuritan.github.io/tags/python/"/>
    
      <category term="aws" scheme="http://kuritan.github.io/tags/aws/"/>
    
  </entry>
  
  <entry>
    <title>Postmortem Gitlab-CI実行不能になった件</title>
    <link href="http://kuritan.github.io/Postmortem-gitlab-ci-pulling-image-failed/"/>
    <id>http://kuritan.github.io/Postmortem-gitlab-ci-pulling-image-failed/</id>
    <published>2020-09-16T07:03:12.000Z</published>
    <updated>2023-02-07T06:29:58.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作成日"><a href="#作成日" class="headerlink" title="作成日"></a>作成日</h1><p>20200915</p><h1 id="障害発生期間"><a href="#障害発生期間" class="headerlink" title="障害発生期間"></a>障害発生期間</h1><p>20200908 19:43 ~ 24:21</p><h1 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h1><p>SRE部  Zhai</p><h1 id="ステータス"><a href="#ステータス" class="headerlink" title="ステータス"></a>ステータス</h1><p>CIが正常に回されるようになった。<br>恒久対策も取っており、再発の可能性が極めて低いかと思われる。</p><h1 id="サマリ"><a href="#サマリ" class="headerlink" title="サマリ"></a>サマリ</h1><p>前任担当者が退社された後、日々普通のように運用されていたgitlabが、突如CIが実行不能となった。<br>原因は、CI関連のコンポーネント内弊社独自ドメインのdocker registryにloginするための認証情報がLDAPを使われており、<br>一度無効化されたら、docker loginできなくなったと判明。  </p><a id="more"></a><h1 id="インパクト"><a href="#インパクト" class="headerlink" title="インパクト"></a>インパクト</h1><p>全gitlabプロジェクトのCIが5時間程度コケた。</p><h1 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h1><p>ミドルウェアなどの構築において、絶対に状態不確定な認証情報（LDAPユーザー）は関連させてはいけない、という一般的ルールに沿ってなかった</p><h1 id="発生原因"><a href="#発生原因" class="headerlink" title="発生原因"></a>発生原因</h1><p>・gitlabまわりの引き継ぎが完璧ではなかった<br>・社内規定通り、退職済みの前任担当者のLDAPアカウントが無効化されたのがきっかけ</p><h1 id="対応"><a href="#対応" class="headerlink" title="対応"></a>対応</h1><p>エラーメッセージ、該当アプリlogまわりから手がかりを探し、<br>googleや社内ドキュメント頼りにヒントをリサーチ、最終的に問題となったdocker login認証情報の場所を特定</p><h1 id="検出"><a href="#検出" class="headerlink" title="検出"></a>検出</h1><p>アプリチームからCIがコケたとの連絡  </p><h1 id="アクションアイテム"><a href="#アクションアイテム" class="headerlink" title="アクションアイテム"></a>アクションアイテム</h1><h2 id="1-問題特定"><a href="#1-問題特定" class="headerlink" title="1.問題特定"></a>1.問題特定</h2><p>Zhai<br>関連コンポーネントの該当時間帯のlogを逐一チェック</p><h2 id="2-ヒント助言"><a href="#2-ヒント助言" class="headerlink" title="2.ヒント助言"></a>2.ヒント助言</h2><p>G.Fさん<br>関連コンポーネントの該当時間帯のlogを逐一チェック</p><h2 id="3-助言＆障害アナウンス注意喚起"><a href="#3-助言＆障害アナウンス注意喚起" class="headerlink" title="3.助言＆障害アナウンス注意喚起"></a>3.助言＆障害アナウンス注意喚起</h2><p>Sさん<br>railsアプリであるgitlabのハマりやすいポイントをアウトプット＆障害アナウンスすべきと指摘</p><h2 id="5-一時問題解消"><a href="#5-一時問題解消" class="headerlink" title="5.一時問題解消"></a>5.一時問題解消</h2><p>zhai<br>自分のLDAP認証情報を差し替えサービス復帰させた</p><h2 id="6-恒久対策"><a href="#6-恒久対策" class="headerlink" title="6.恒久対策"></a>6.恒久対策</h2><p>zhai<br>ローカルadminユーザーを作り、LDAP認証情報を差し替え、認証情報無効化のリスクをなくした</p><h1 id="教訓"><a href="#教訓" class="headerlink" title="教訓"></a>教訓</h1><h2 id="うまくいった事"><a href="#うまくいった事" class="headerlink" title="うまくいった事"></a>うまくいった事</h2><p>・早期発見できて、当日解決でさらなる被害拡散は発生しなかった<br>・たくさん助言をいただき、問題特定に繋がった  </p><h2 id="うまくいかなかった事"><a href="#うまくいかなかった事" class="headerlink" title="うまくいかなかった事"></a>うまくいかなかった事</h2><p>・各コンポーネントのlog保存場所は違って、探すのに大変時間をかかった<br>・LDAPユーザーがあやしいとかなり初期の段階で感じたものの、手入力で自分のLDAPアカウントでdocker loginできないことを目を取られ、その認証情報格納場所は最後の最後でようやく発見した  </p><h2 id="幸運だった事"><a href="#幸運だった事" class="headerlink" title="幸運だった事"></a>幸運だった事</h2><p>・問題発生時は定時後で、利用者が少なかった<br>・前任担当者とgitlabまわりの共同作業があって、ある程度、システムのアーキテクチャーを把握してる  </p><h2 id="再発防止の為にできる事"><a href="#再発防止の為にできる事" class="headerlink" title="再発防止の為にできる事"></a>再発防止の為にできる事</h2><p>LDAPアカウントではなく、ローカルadminアカウントを新規作り、その認証情報を利用した  </p><h2 id="タイムライン"><a href="#タイムライン" class="headerlink" title="タイムライン"></a>タイムライン</h2><p>【20200908】<br>19:43　chatworkより、gitlab-ciがコケてる情報を入手<br>19:50　同一リポジトリで、他ユーザで問題再現<br>20:07　他リポジトリで、同一問題再現<br>20:30　各所ログを精査したところ、権限まわりに不備があるように思われた<br>20:40　CIがregistry.{弊社独自ドメイン}.jpへdocker loginできず、リトライした末失敗したと症状を判明<br>21:10　退職済みの先任担当者のLDAP情報はgitlab-ciに使われてるような痕跡を発見し、LDAPユーザー無効化によるdocker login認証エラーかと思われた<br>22:10　早期解決できず、全社に障害アナウンス<br>23:37　ドキュメントを参照に、障害ポイントのgitlab-ciはrunnerというコンポーネントで、それの元はbase-runnerであることを判明<br>24:10　base-runnerの.docker/直下のconfigファイルにbase64化され前任担当者のLDAP認証情報と思われるデータを発見<br>24:19　一時対策として、認証情報を差し替え、service再起動後、ci復活を確認<br>24:24　全社に復帰アナウンス<br>……<br>【20200911】<br>18:30　恒久対策として、gitlabローカルadminユーザーを作り、認証情報を再度差し替え、動作確認済み  </p><h2 id="参考情報"><a href="#参考情報" class="headerlink" title="参考情報"></a>参考情報</h2><p><a href="https://docs.gitlab.com/ee/administration/logs.html#productionlog" target="_blank" rel="noopener">https://docs.gitlab.com/ee/administration/logs.html#productionlog</a><br><a href="https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#define-an-image-from-a-private-container-registry" target="_blank" rel="noopener">https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#define-an-image-from-a-private-container-registry</a><br><a href="https://openreggui.org/git/help/ci/docker/using_docker_images.md" target="_blank" rel="noopener">https://openreggui.org/git/help/ci/docker/using_docker_images.md</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;作成日&quot;&gt;&lt;a href=&quot;#作成日&quot; class=&quot;headerlink&quot; title=&quot;作成日&quot;&gt;&lt;/a&gt;作成日&lt;/h1&gt;&lt;p&gt;20200915&lt;/p&gt;
&lt;h1 id=&quot;障害発生期間&quot;&gt;&lt;a href=&quot;#障害発生期間&quot; class=&quot;headerlink&quot; title=&quot;障害発生期間&quot;&gt;&lt;/a&gt;障害発生期間&lt;/h1&gt;&lt;p&gt;20200908 19:43 ~ 24:21&lt;/p&gt;
&lt;h1 id=&quot;作者&quot;&gt;&lt;a href=&quot;#作者&quot; class=&quot;headerlink&quot; title=&quot;作者&quot;&gt;&lt;/a&gt;作者&lt;/h1&gt;&lt;p&gt;SRE部  Zhai&lt;/p&gt;
&lt;h1 id=&quot;ステータス&quot;&gt;&lt;a href=&quot;#ステータス&quot; class=&quot;headerlink&quot; title=&quot;ステータス&quot;&gt;&lt;/a&gt;ステータス&lt;/h1&gt;&lt;p&gt;CIが正常に回されるようになった。&lt;br&gt;恒久対策も取っており、再発の可能性が極めて低いかと思われる。&lt;/p&gt;
&lt;h1 id=&quot;サマリ&quot;&gt;&lt;a href=&quot;#サマリ&quot; class=&quot;headerlink&quot; title=&quot;サマリ&quot;&gt;&lt;/a&gt;サマリ&lt;/h1&gt;&lt;p&gt;前任担当者が退社された後、日々普通のように運用されていたgitlabが、突如CIが実行不能となった。&lt;br&gt;原因は、CI関連のコンポーネント内弊社独自ドメインのdocker registryにloginするための認証情報がLDAPを使われており、&lt;br&gt;一度無効化されたら、docker loginできなくなったと判明。  &lt;/p&gt;
    
    </summary>
    
      <category term="infra" scheme="http://kuritan.github.io/categories/infra/"/>
    
    
      <category term="JP" scheme="http://kuritan.github.io/tags/JP/"/>
    
      <category term="Work" scheme="http://kuritan.github.io/tags/Work/"/>
    
  </entry>
  
  <entry>
    <title>もう令和だから、開発環境くらいdockerに載せたらどうだい</title>
    <link href="http://kuritan.github.io/welcome-to-vscode-remote-containers/"/>
    <id>http://kuritan.github.io/welcome-to-vscode-remote-containers/</id>
    <published>2020-06-21T10:36:19.000Z</published>
    <updated>2023-02-07T06:29:58.265Z</updated>
    
    <content type="html"><![CDATA[<p>月イチでブログを更新しようと思ったが、案外難しいすね…<br>なんだいかんだい言っても、モチベション維持は一番ですから。<br>くだらない話はこのへんにして、VSCodeのExtension(RemoteContainers)をお話しましょうー  </p><a id="more"></a><h1 id="instruction"><a href="#instruction" class="headerlink" title="instruction"></a>instruction</h1><p>今の時点(2020/06)で、まだプレビュー段階のRemoteContainersですが、<br>VSCodeにおいての開発手法に新鮮な風を吹き込んでくれることが間違いなし！<br><img src="docker3.jpg" alt="Remote-Containers"></p><p>こいつのどこがいい？そりゃ環境構築の手間が省けることじゃー<br>こんな話、あったことありますか？  </p><ul><li>新しいプロジェクトの開発を取り込もうと思って、環境構築だけで丸一日かかった</li><li>新しいメンバーが入って、ドキュメントを読ませたり、環境構築をやらせたり、なんとなく一週間が過ぎた</li><li>手元のマシンで色んなバージョンコントローラーを入れて、別々のプロジェクトに行き渡りしたら、バージョン切り替えだけで大変</li></ul><p>RemoteContainersを使ったら、こんなストレス全部いなくなるんだよ！  </p><h1 id="trial"><a href="#trial" class="headerlink" title="trial"></a>trial</h1><p>早速、試してみましょう  </p><ol><li>インストールは割愛させてくださいね（VSCodeのExtensionから検索してからのinstallだけ）</li><li>Command Paletteからremoteを検索し、Open Folder in Containerを選択<br><img src="docker2.jpg" alt="extension"></li><li>色んなdocker imageが表示されるが、ここはぼくのブログを例にして、node.js 10をポッチと</li><li>ﾁｮｯﾄ処理を待ってから、.devcontainerのディレクトリが作られ、中にはDockerfileとdevcontainer.json２つファイルがあります</li><li>VSCodeのメニューバーから[View] -&gt; [Terminal]をクリックし、ターミナルを開けると、今はもうcontainer環境内にいることがわかった</li><li>そこからもうﾁｮｯﾄアレンジが必要で、ぼくのブログはhexoを使ってるので、hexoのインストールや日本語の対応、timezoneの調整が必要ですね。それらは全部Dockerfileをいじれば簡単です。</li></ol><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>ぼくがいじった後のモノをお見せしましょう。  </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Copyright (c) Microsoft Corporation. All rights reserved.</span></span><br><span class="line"><span class="comment"># Licensed under the MIT License. See https://go.microsoft.com/fwlink/?linkid=2090316 for license information.</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To fully customize the contents of this image, use the following Dockerfile instead:</span></span><br><span class="line"><span class="comment"># https://github.com/microsoft/vscode-dev-containers/tree/v0.122.1/containers/javascript-node-10/.devcontainer/Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> mcr.microsoft.com/vscode/devcontainers/javascript-node:<span class="number">0</span>-<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ** [Optional] Uncomment this section to install additional packages. **</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># RUN apt-get update \</span></span><br><span class="line"><span class="comment">#     &amp;&amp; export DEBIAN_FRONTEND=noninteractive \</span></span><br><span class="line"><span class="comment">#     &amp;&amp; apt-get -y install --no-install-recommends &lt;your-package-list-here&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Verify git and needed tools are installed</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y git procps locales \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">'/^#.* ja_JP.UTF-8 /s/^#//'</span> /etc/locale.gen \</span></span><br><span class="line"><span class="bash">    &amp;&amp; locale-gen \</span></span><br><span class="line"><span class="bash">    &amp;&amp; ln -fs /usr/share/zoneinfo/Asia/Tokyo /etc/localtime\</span></span><br><span class="line"><span class="bash">    &amp;&amp; dpkg-reconfigure -f noninteractive tzdata</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Remove outdated yarn from /opt and install via package </span></span></span><br><span class="line"><span class="bash"><span class="comment"># so it can be easily updated via apt-get upgrade yarn</span></span></span><br><span class="line"><span class="bash">RUN rm -rf /opt/yarn-* \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -f /usr/<span class="built_in">local</span>/bin/yarn \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -f /usr/<span class="built_in">local</span>/bin/yarnpkg \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install -y curl apt-transport-https lsb-release \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -sS https://dl.yarnpkg.com/$(lsb_release -is | tr <span class="string">'[:upper:]'</span> <span class="string">'[:lower:]'</span>)/pubkey.gpg | apt-key add - 2&gt;/dev/null \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"deb https://dl.yarnpkg.com/<span class="variable">$(lsb_release -is | tr '[:upper:]' '[:lower:]')</span>/ stable main"</span> | tee /etc/apt/sources.list.d/yarn.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get -y install --no-install-recommends yarn</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Install eslint</span></span></span><br><span class="line"><span class="bash">RUN npm install -g eslint \</span></span><br><span class="line"><span class="bash">    &amp;&amp; npm install -g hexo-cli \</span></span><br><span class="line"><span class="bash">    &amp;&amp; npm install hexo -g</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Clean up</span></span></span><br><span class="line"><span class="bash">RUN apt-get autoremove -y \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get clean -y \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/* </span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Set the default shell to bash instead of sh</span></span></span><br><span class="line"><span class="bash">ENV SHELL /bin/bash</span></span><br><span class="line"><span class="bash">ENV LANG=<span class="string">'ja_jp.utf8'</span></span></span><br></pre></td></tr></table></figure><p>こうしたら、もう手元マシンの環境と関係なく、プロジェクトごとの開発環境をかんたんに使い分けられる。<br>おまけに、gitでチーム共用すれば、誰しも同じ環境でサクサクと開発だけに集中できます。<br>マシン乗り換えでも開発環境構築をもういっぺんやり直す必要がなくなった。<br>これぞ神だ！   </p><p>最後に、今回の更新を書いてる時のVSCode画面キャプチャーの一枚で、締めとしましょう。  </p><p><img src="docker1.jpg" alt="commit"></p><p><strong>みなさんも、Remote-Containersで幸せになりましょう！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;月イチでブログを更新しようと思ったが、案外難しいすね…&lt;br&gt;なんだいかんだい言っても、モチベション維持は一番ですから。&lt;br&gt;くだらない話はこのへんにして、VSCodeのExtension(RemoteContainers)をお話しましょうー  &lt;/p&gt;
    
    </summary>
    
      <category term="infra" scheme="http://kuritan.github.io/categories/infra/"/>
    
    
      <category term="JP" scheme="http://kuritan.github.io/tags/JP/"/>
    
      <category term="docker" scheme="http://kuritan.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Portfolio</title>
    <link href="http://kuritan.github.io/Portfolio/"/>
    <id>http://kuritan.github.io/Portfolio/</id>
    <published>2020-05-20T07:44:52.000Z</published>
    <updated>2023-02-07T06:29:58.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h2><ul><li>社会人10年目</li><li>Role: DevOps Engineer</li><li>Google Cloud Certified Professional Cloud Developer</li><li>Aboutme: <a href="https://matilde-lab.com/" target="_blank" rel="noopener">https://matilde-lab.com/</a></li><li>Blog: <a href="https://kuritan.github.io">https://kuritan.github.io</a></li><li>Github: <a href="https://github.com/kuritan" target="_blank" rel="noopener">https://github.com/kuritan</a></li><li>Linkedin: <a href="https://www.linkedin.com/in/yujia-zhai-kuritan/" target="_blank" rel="noopener">https://www.linkedin.com/in/yujia-zhai-kuritan/</a><a id="more"></a></li></ul><h2 id="PR-TL-DR"><a href="#PR-TL-DR" class="headerlink" title="PR(TL;DR)"></a>PR(TL;DR)</h2><blockquote><p>某外資ITにてkubernetes製品のテクニカルサポート担当<br>&amp;&amp; 某上場Web企業でSenior SRE（SiteReliabilityEngineer）経験あり<br>&amp;&amp; パブリッククラウド・オンプレミス環境企画・構築・運用・監視・DevOps 経験5年+<br>&amp;&amp; ユーザ系エンタープライズ企業情シス担当経験 3年+<br>&amp;&amp; Networkアプライアンスメーカーのプリセールス経験 1年+</p></blockquote><h3 id="DevOps-Skill"><a href="#DevOps-Skill" class="headerlink" title="DevOps Skill"></a>DevOps Skill</h3><ul><li>Public Cloud(e.g. AWS, GCP, IDCF)</li><li>kubernetes(e.g. EKS, GKE, Rancher), Kustomize, Argocd</li><li>Terraform, Ansible, Chef(Itamae), Packer</li><li>Python, Ruby(On Rails), Go, Shell</li><li>Circleci, Travis-CI, Gitlab-CI</li><li>Mackerel, Zabbix, Pagerduty, NewRelic, Sentry, Datadog</li><li>Fluentd, TreasureData</li><li>MySQL, Redis, Memcached, Spanner</li><li>Nginx, Envoy</li><li>Vagrant, Docker</li><li>Github, Gitlab(As a Administrator)</li><li>etc.</li></ul><h3 id="Tech-Blog"><a href="#Tech-Blog" class="headerlink" title="Tech Blog"></a>Tech Blog</h3><ul><li><a href="https://kuritan.github.io/master-data-management-via-argocd/">Argocdで自家製マスターデータ管理を</a></li><li><a href="https://kuritan.github.io/gitlab-ecs-ci-cd/">Gitlab→AWS ECSクラスタのCI/CDパイプライン</a></li><li><a href="https://kuritan.github.io/bidirectional-assume-role-for-aws/">Assume roleでクロスアカウントのAWSリソースを弄ろう</a></li><li><a href="https://kuritan.github.io/selfservice-with-chatworkwebhook-apigateway-and-lambda/">chatworkとlambdaでセルフサービスしようぜwith terraform</a></li><li><a href="https://kuritan.github.io/">etc.</a></li></ul><h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h3><ul><li>Shell実務経験あり(6年+)</li><li>Python実務経験あり(4年+)</li><li>TerraformによるInfrastructure as Code経験(3年+)</li><li>Ruby(On Rails), Golang微経験</li></ul><h3 id="Language"><a href="#Language" class="headerlink" title="Language"></a>Language</h3><ul><li>Japanese(N1, ビジネス以上、ネイティブ未満)</li><li>English(TOEIC 835)</li><li>Chinese Mandarin(Native)</li></ul><h3 id="Tech-Coaching"><a href="#Tech-Coaching" class="headerlink" title="Tech Coaching"></a>Tech Coaching</h3><ul><li><a href="https://github.com/drecom/terraform-onboarding" target="_blank" rel="noopener">Junior IT infrastructure engineer &amp; DevOps engineer &amp; SRE向けのTerraform入門workshop</a></li><li>駆け出しエンジニアのOJT担当</li><li>新卒エンジニアメンター</li></ul><h3 id="Facility-amp-Appliance"><a href="#Facility-amp-Appliance" class="headerlink" title="Facility &amp; Appliance"></a>Facility &amp; Appliance</h3><ul><li>データセンター経験<ul><li>3U アプライアンスまで</li><li>5 ラックまで</li></ul></li><li>機器<ul><li>Cisco 2960シリーズ/Yamaha RTX1200・WLX402/Juniper SRXシリーズ</li><li>Dell PowerEdgeシリーズ/HP ProLiantシリーズ</li><li>Fortinet/Sophos/SonicWall</li><li>HP 3par/DELL NX3230</li></ul></li><li>etc.</li></ul><h2 id="職務経歴-現職"><a href="#職務経歴-現職" class="headerlink" title="職務経歴(現職)"></a>職務経歴(現職)</h2><h3 id="某外資IT会社-2022-08"><a href="#某外資IT会社-2022-08" class="headerlink" title="某外資IT会社(2022/08~)"></a>某外資IT会社(2022/08~)</h3><ul><li>テクニカルサポート エンジニア(2019/04~2021/03)<ul><li>AWS、オンプレミス</li><li>OS：Ubuntu</li><li>ミドルウェア：PostgreSQL, Redis, KongGateway等</li><li>チャット：Webex</li><li>コード管理：Gitlab</li><li>仮想化：Docker, Kubernetes</li></ul></li></ul><h2 id="職務経歴-過去"><a href="#職務経歴-過去" class="headerlink" title="職務経歴(過去)"></a>職務経歴(過去)</h2><h3 id="某上場ソーシャルゲーム会社-2019-04-2022-08"><a href="#某上場ソーシャルゲーム会社-2019-04-2022-08" class="headerlink" title="某上場ソーシャルゲーム会社(2019/04~2022/08)"></a>某上場ソーシャルゲーム会社(2019/04~2022/08)</h3><ul><li>Senior SRE(2021/04~2022/08)</li><li>SRE部 エンジニア(2019/04~2021/03)<ul><li>クラウド：AWS,GCP,IDCF,IIJ GIO</li><li>OS：CentOS</li><li>ミドルウェア：MySQL,Redis,Memcached等</li><li>チャット：Chatwork</li><li>情報共有：Confluence</li><li>コード管理：Gitlab,Github enterprise</li><li>仮想化：Vagrant,Docker,Kubernetes</li><li>監視：Mackerel,Zabbix,Consul</li><li>構成管理：Terraform,Chef,Ansible等<ul><li>Infrastructure as Codeをポリシーとした構成管理を行っています。</li></ul></li></ul></li></ul><h3 id="某上場ITサービス会社-2017-10-2019-03"><a href="#某上場ITサービス会社-2017-10-2019-03" class="headerlink" title="某上場ITサービス会社(2017/10~2019/03)"></a>某上場ITサービス会社(2017/10~2019/03)</h3><ul><li>オンラインストーレジシステム<ul><li>AWSをベースにしたシステム企画・構築・運用・監視</li><li>セキュリティを考慮したアーキテクチャー設計</li><li>データ永久化・EC2使い捨て化仕組み</li><li>スケーラビリティ、可用性の考慮</li><li>CI/CD仕組み構築・運用</li></ul></li><li>イベントWEB生中継システム<ul><li>AWS・docker環境をベースにしたシステム企画・構築・運用・監視</li><li>ElasticSearch/Grafanaによるアクセスログ可視化</li><li>ffmpegによるライブ映像変換、オンデマンド対応</li><li>Galting/Jmeterによる負荷テスト実施し、パフォーマンスを改善</li><li>開発チームと連携</li></ul></li><li>駆け出しエンジニアのOJT担当</li></ul><h3 id="某上場ネットワークアプライアンスメーカー-2016-09-2017-09"><a href="#某上場ネットワークアプライアンスメーカー-2016-09-2017-09" class="headerlink" title="某上場ネットワークアプライアンスメーカー(2016/09~2017/09)"></a>某上場ネットワークアプライアンスメーカー(2016/09~2017/09)</h3><ul><li>プリセールスエンジニアとして、業務遂行<ul><li>製品・ソリューションの資料作成</li><li>お客様へのプレゼンテーション</li><li>開発陣⇔お客様のニーズ調整</li></ul></li><li>競合他社製品評価</li></ul><h3 id="某自動車部品メーカー-2015-05-2016-09"><a href="#某自動車部品メーカー-2015-05-2016-09" class="headerlink" title="某自動車部品メーカー(2015/05~2016/09)"></a>某自動車部品メーカー(2015/05~2016/09)</h3><ul><li>社内統括IT担当<ul><li>多拠点すべてのITシステム運用</li><li>新規サーバ・ネットワーク機器・システムの企画・導入</li><li>外部ベンダーとのやり取り</li></ul></li><li>IT部署中期計画考案</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Profile&quot;&gt;&lt;a href=&quot;#Profile&quot; class=&quot;headerlink&quot; title=&quot;Profile&quot;&gt;&lt;/a&gt;Profile&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;社会人10年目&lt;/li&gt;
&lt;li&gt;Role: DevOps Engineer&lt;/li&gt;
&lt;li&gt;Google Cloud Certified Professional Cloud Developer&lt;/li&gt;
&lt;li&gt;Aboutme: &lt;a href=&quot;https://matilde-lab.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://matilde-lab.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Blog: &lt;a href=&quot;https://kuritan.github.io&quot;&gt;https://kuritan.github.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github: &lt;a href=&quot;https://github.com/kuritan&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/kuritan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linkedin: &lt;a href=&quot;https://www.linkedin.com/in/yujia-zhai-kuritan/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.linkedin.com/in/yujia-zhai-kuritan/&lt;/a&gt;
    
    </summary>
    
      <category term="Life" scheme="http://kuritan.github.io/categories/Life/"/>
    
    
      <category term="JP" scheme="http://kuritan.github.io/tags/JP/"/>
    
      <category term="Work" scheme="http://kuritan.github.io/tags/Work/"/>
    
  </entry>
  
  <entry>
    <title>オタクのリポジトリって、ダイエットしませんか</title>
    <link href="http://kuritan.github.io/%E3%82%AA%E3%82%BF%E3%82%AF%E3%81%AE%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%A3%E3%81%A6%E3%80%81%E3%83%80%E3%82%A4%E3%82%A8%E3%83%83%E3%83%88%E3%81%97%E3%81%BE%E3%81%9B%E3%82%93%E3%81%8B/"/>
    <id>http://kuritan.github.io/オタクのリポジトリって、ダイエットしませんか/</id>
    <published>2020-05-12T12:47:13.000Z</published>
    <updated>2023-02-07T06:29:58.265Z</updated>
    
    <content type="html"><![CDATA[<p>お久しぶりっすー<br>最近ルーティンワークの自動化に力を入れていますね。<br>途中で、バイナリファイルがたくさん管理してるgitリポジトリの肥大化問題にも直面し、今回はそのダイエットについて、お話したいと思います。</p><a id="more"></a><h1 id="課題-症状"><a href="#課題-症状" class="headerlink" title="課題(症状)"></a>課題(症状)</h1><ul><li><p>かなり古いプロダクトで、SVNではなく、gitを使ってバイナリファイルを管理した</p></li><li><p>git pull後、該当ディレクトリにて、Enter押すだけでも、プロンプトが帰るまでかなり時間がかかる</p></li><li><p>git checkout [branch]だけで411秒かかる</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo GIT_TRACE=1 GIT_TRACE_PERFORMANCE=1 git checkout infra/20200423</span><br><span class="line">14:53:10.816923 git.c:344               trace: built-in: git checkout infra/20200423</span><br><span class="line">14:53:11.199887 read-cache.c:1914       performance: 0.287323598 s: read cache .git/index</span><br><span class="line">14:53:39.084582 preload-index.c:112     performance: 27.884651556 s: preload index</span><br><span class="line">14:53:39.088442 read-cache.c:1472       performance: 0.003721072 s: refresh index</span><br><span class="line">14:54:47.321432 read-cache.c:2411       performance: 0.513602372 s: write index, changed mask = 28</span><br><span class="line">15:00:01.016403 diff-lib.c:527          performance: 313.684637025 s: diff-index</span><br><span class="line">Switched to branch &apos;infra/20200423&apos;</span><br><span class="line">15:00:02.649095 trace.c:420             performance: 411.851091228 s: git command: git checkout infra/20200423</span><br></pre></td></tr></table></figure></li><li><p>リポジトリ全体がなんと50GB+</p><ul><li>.git/obejcts/pack が46GB+</li></ul></li></ul><h1 id="改善方向"><a href="#改善方向" class="headerlink" title="改善方向"></a>改善方向</h1><ul><li>とにかく履歴をダイエットしたい</li><li>いろんな大人の事情で、途中SVNに切り替わることができない</li><li>既存ファイルに影響を与えない</li></ul><h1 id="トライ"><a href="#トライ" class="headerlink" title="トライ"></a>トライ</h1><p>googleセンセイに聞く限り、「git filter-branch」が頻繁に出てきますね。<br>が、ところどころがパフォーマンス芳しくない報告が散見できます。  </p><p>もうﾁｮｯﾄ調べたら、<a href="https://rtyley.github.io/bfg-repo-cleaner/" target="_blank" rel="noopener">bfg-repo-cleaner</a>というツールにたどり着けました。  </p><p>よっしゃ～やるぞー<br>三回分けて実験をしました。  </p><ul><li>–strip-blobs-bigger-than 1M</li><li>–strip-blobs-bigger-than 200K</li><li>–strip-blobs-bigger-than 100K</li></ul><p>それぞれの検証内容は割愛させていただきます。<br>結果として、200K =&gt; 100Kに減らしたところで、リポジトリ全体が1GBしか容量が削減できなかった。<br>100Kあたりは限界かと考えられますね。</p><h2 id="備考"><a href="#備考" class="headerlink" title="備考"></a>備考</h2><p>自分の場合、バイナリファイルが大体100KB~400KBのサイズで、数多く存在するイメージです。</p><h1 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h1><ul><li><p>サイズ: .git/objects/packのサイズを四分の一以下に</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo du -sh .git/objects/*</span><br><span class="line">4.0K    .git/objects/info</span><br><span class="line">11G .git/objects/pack</span><br></pre></td></tr></table></figure></li><li><p>パフォーマンス:git checkout所要時間は 411s =&gt; 14.56s</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo GIT_TRACE=1 GIT_TRACE_PERFORMANCE=1 git checkout -b 20200512</span><br><span class="line">22:20:08.924865 git.c:344               trace: built-in: git checkout -b 20200512</span><br><span class="line">22:20:09.096295 read-cache.c:1914       performance: 0.125180646 s: read cache .git/index</span><br><span class="line">22:20:22.258629 preload-index.c:112     performance: 13.162298644 s: preload index</span><br><span class="line">22:20:22.266180 read-cache.c:1472       performance: 0.003084165 s: refresh index</span><br><span class="line">22:20:23.136205 read-cache.c:2411       performance: 0.367353451 s: write index, changed mask = 28</span><br><span class="line">22:20:23.314740 diff-lib.c:527          performance: 0.155411498 s: diff-index</span><br><span class="line">Switched to a new branch &apos;20200512&apos;</span><br><span class="line">22:20:23.470696 trace.c:420             performance: 14.564827810 s: git command: git checkout -b 20200512</span><br></pre></td></tr></table></figure></li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>Hugeリポジトリ、しんどいっす</li><li>リソース関連はSVNを使いましょう</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;お久しぶりっすー&lt;br&gt;最近ルーティンワークの自動化に力を入れていますね。&lt;br&gt;途中で、バイナリファイルがたくさん管理してるgitリポジトリの肥大化問題にも直面し、今回はそのダイエットについて、お話したいと思います。&lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="http://kuritan.github.io/categories/dev/"/>
    
    
      <category term="JP" scheme="http://kuritan.github.io/tags/JP/"/>
    
      <category term="git" scheme="http://kuritan.github.io/tags/git/"/>
    
      <category term="work" scheme="http://kuritan.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>市販ルーター使ってSoftbank光をブラッシュアップ</title>
    <link href="http://kuritan.github.io/%E5%B8%82%E8%B2%A9%E3%83%AB%E3%83%BC%E3%82%BF%E3%83%BC%E4%BD%BF%E3%81%A3%E3%81%A6Softbank%E5%85%89%E3%82%92%E3%83%96%E3%83%A9%E3%83%83%E3%82%B7%E3%83%A5%E3%82%A2%E3%83%83%E3%83%97/"/>
    <id>http://kuritan.github.io/市販ルーター使ってSoftbank光をブラッシュアップ/</id>
    <published>2020-04-28T03:22:47.000Z</published>
    <updated>2023-02-07T06:29:58.285Z</updated>
    
    <content type="html"><![CDATA[<p>最近、世の中の流れに乗って、WFH、いわゆる在宅勤務を初めて、はや1ヶ月過ぎました。<br>二人暮らして、2人分のオンラインMTGもあるし、スマホ、タブレット、ゲーム機も、全部インターネットが必要とされ、その分ルーターへの負荷も無視できないことになった。<br>我が家では、ソフトバンク光を契約してはいるが、あいにくマンション型で、速度がぶっちゃけ遅い。(100Mbps)<br>以前持ってる市販のルーターで、何とか改善できないかを考えました。</p><a id="more"></a><h1 id="リサーチ"><a href="#リサーチ" class="headerlink" title="リサーチ"></a>リサーチ</h1><h2 id="現状"><a href="#現状" class="headerlink" title="現状"></a>現状</h2><p>まず、今のステータスをチェックしましょう。<br>速度は、どれどれー<br><img src="router1.jpg" alt="改善前"></p><p>ISP契約としてはソフトバンク光、マンション型、ベストエフォート。<br>理論上は100Mbpsの速度ですが、まぁベストエフォートで60Mbps、そんなもんですかね。  </p><h2 id="改善方向性"><a href="#改善方向性" class="headerlink" title="改善方向性"></a>改善方向性</h2><ul><li>スペックのいい市販ルーターを導入、負荷のボトルネックを解消<ul><li>以前から持ってるASUS RT-AC68uの出番（wrt-Merlin firmware）</li><li>あいにくIPv6機能未サポート</li></ul></li><li>ソフトバンク提供し、BB Unit経由で利用できるIPv6機能は捨てたくない</li><li>貧乏人ので、余分のコスト掛けたくない</li><li>大規模なトポロジー変更は面倒だから、したくない</li></ul><h2 id="問題点"><a href="#問題点" class="headerlink" title="問題点"></a>問題点</h2><ul><li>Softbank提供のIPv4 + IPv6ハイブリッド機能は、BB unit使った上で初めて有効化される説</li><li>集合住宅ので、100MbpsがMAXかと</li><li>毎日ネットワーク使って仕事するので、長時間の工事はNG</li></ul><h1 id="改善案"><a href="#改善案" class="headerlink" title="改善案"></a>改善案</h1><p><img src="router2.jpg" alt="改善案"><br>ﾁｮｯﾄ説明しますね。  </p><ol><li>BB Unitのweb管理画面から、DMZ機能を有効化</li><li>DMZ用のIPを指定(ここは192.168.3.250を仮定)</li><li>BB UnitのLAN口から一本LANケーブル追加し、ac68uのWAN口と接続</li><li>ac68uのweb管理画面にて、WAN設定を静的IPアドレスに変更の上、先程指定したDMZ用IPを入力(192.168.3.250)</li><li>ac68uのweb管理画面にて、LAN設定のDHCP設定を見直し、DMZ用IP(192.168.3.250)のセグメントを避けよう</li><li>ac68uのweb管理画面にて、Wi-Fiの設定も見直そう</li><li>ac68uを再起動し、wifi接続を試して、インターネットアクセスを確認</li><li>↑全部OKだったら、BB UnitのWiFi機能をOFFにしましょう</li></ol><h1 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h1><p><img src="router3.jpg" alt="改善後"></p><p>まぁ…LANケーブル一本のコストでこれくらいの効果だから、万々歳ー<br>※そもそも100Mbpsベストエフォートの契約だし…  </p><p>皆様、すできなテレワークをお過ごしくださいませー</p><h1 id="助っ人"><a href="#助っ人" class="headerlink" title="助っ人"></a>助っ人</h1><p><img src="router4.jpg" alt="RT-ac68u"><br><strong>ASUS RT-AC68u</strong><br>オリジナルのfirmwarよりwrt-Merlin firmwareがオススメです。  </p><h1 id="参考URL"><a href="#参考URL" class="headerlink" title="参考URL"></a>参考URL</h1><p><a href="https://blog.pastime.ne.jp/personal_computer/hardware/2800" target="_blank" rel="noopener">https://blog.pastime.ne.jp/personal_computer/hardware/2800</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近、世の中の流れに乗って、WFH、いわゆる在宅勤務を初めて、はや1ヶ月過ぎました。&lt;br&gt;二人暮らして、2人分のオンラインMTGもあるし、スマホ、タブレット、ゲーム機も、全部インターネットが必要とされ、その分ルーターへの負荷も無視できないことになった。&lt;br&gt;我が家では、ソフトバンク光を契約してはいるが、あいにくマンション型で、速度がぶっちゃけ遅い。(100Mbps)&lt;br&gt;以前持ってる市販のルーターで、何とか改善できないかを考えました。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://kuritan.github.io/categories/Life/"/>
    
    
      <category term="JP" scheme="http://kuritan.github.io/tags/JP/"/>
    
      <category term="Hobby" scheme="http://kuritan.github.io/tags/Hobby/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab→AWS ECSクラスタのCI/CDパイプライン</title>
    <link href="http://kuritan.github.io/gitlab-ecs-ci-cd/"/>
    <id>http://kuritan.github.io/gitlab-ecs-ci-cd/</id>
    <published>2020-02-03T09:25:19.000Z</published>
    <updated>2023-02-07T06:29:58.261Z</updated>
    
    <content type="html"><![CDATA[<p>気がついたら、2020年の1月ってブログ更新ナーシング！これはヤバい……<br>何とかしないと、もうこのブロクの更新が停止しまいそうー<br>とりあえず、書こう。</p><a id="more"></a><h1 id="経緯"><a href="#経緯" class="headerlink" title="経緯"></a>経緯</h1><p>とある新規プロダクトは基盤を普通のEC2からECSに変えたいとの要望があって、<br>一週間漬け込んで、環境構築とdockerイメージのCI/CDパイプライン作成に投げました。  </p><p>全体環境はterraformで構築し、今回はその一部であるCI/CDパイプラインについて、お話させていただきます。  </p><h1 id="全体設計"><a href="#全体設計" class="headerlink" title="全体設計"></a>全体設計</h1><p>まずは、全体イメージ図から見てみましょうー<br><img src="ci1.jpg" alt="全体イメージ図"><br>ご覧の通り、developerとして、必須ファイルをgitlabの指定リポジトリにpushし、<br>masterブランチにmergeされたら、あとの工程は自動的に回します。<br>シンプルかつカンタン、万々歳〜  </p><h1 id="gitlabステージ"><a href="#gitlabステージ" class="headerlink" title="gitlabステージ"></a>gitlabステージ</h1><p>このステージで、Dockerfileを含め、<br>image buildが必要とするすべてのファイルをzipに固めて、s3の指定バケットに転送する。  </p><blockquote><p>ここは、gitlab-ci機能を利用</p></blockquote><h2 id="WebHookでカバーできない"><a href="#WebHookでカバーできない" class="headerlink" title="WebHookでカバーできない?"></a>WebHookでカバーできない?</h2><p>githubだと簡単にできるが、あいにくうちはプライベートのgitlabを使っており、<br>止む得なく、gitlab+S3+cloudtrail+cloudwatch eventのセットで対応することにした。  </p><h2 id="必要ファイルとvars"><a href="#必要ファイルとvars" class="headerlink" title="必要ファイルとvars"></a>必要ファイルとvars</h2><ul><li>gitlab CI/CDで（S3にputするアクションはgitlab-ciを利用）<ul><li>AWS_ACCESS_KEY</li><li>AWS_SECRET_KEY</li></ul></li><li>サービスアカウント内app_deployユーザのクレデンシャル、infraに聞く<ul><li>SSH_PRIVATE_KEY</li><li>該当リポジトリをpullできるユーザのkey</li></ul></li><li>.gitlab-ci.ymlファイル内(適宜に変更)<ul><li>UPLOAD_REGION : ap-northeast-1(※東京リージョン)</li><li>UPLOAD_BUCKET : code-pipeline</li><li>UPLOAD_FOLDER : docker-image</li><li>UPLOAD_FILE_ALL : docker_image.zip(※出力zipファイルのフルネーム)</li></ul></li><li>Dockerfile</li><li>buildspec.yml(buildステージ必須)</li><li>taskdef.json(deployテージ必須)</li><li>appspec.yml(deployテージ必須)</li></ul><h2 id="gitlab-ci-ymlサンプル"><a href="#gitlab-ci-ymlサンプル" class="headerlink" title="gitlab-ci.ymlサンプル"></a>gitlab-ci.ymlサンプル</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#とにかくalpineのイメージしてしましょう、ここは社内のURLので</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">"XXXXXXXXX/alpine:latest"</span></span><br><span class="line"><span class="attr">services:</span> <span class="string">[]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line"><span class="comment">#適宜に変更</span></span><br><span class="line">  <span class="string">UPLOAD_REGION</span>      <span class="string">:</span> <span class="string">ap-northeast-1</span></span><br><span class="line">  <span class="string">UPLOAD_BUCKET</span>      <span class="string">:</span> <span class="string">code-pipeline</span></span><br><span class="line">  <span class="string">UPLOAD_FOLDER</span>      <span class="string">:</span> <span class="string">docker-image</span></span><br><span class="line">  <span class="string">UPLOAD_FILE_ALL</span>    <span class="string">:</span> <span class="string">docker_image.zip</span></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">date</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">export</span> <span class="string">LANG=C</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">export</span> <span class="string">LC_ALL=C</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">|-</span></span><br><span class="line">    <span class="string">if</span> <span class="string">[</span> <span class="string">"$(type ssh-agent)"</span> <span class="string">=</span> <span class="string">""</span> <span class="string">];</span> <span class="string">then</span></span><br><span class="line">      <span class="string">apk</span> <span class="bullet">--update</span> <span class="string">add</span> <span class="bullet">--no-cache</span> <span class="string">openssh-client</span> <span class="string">git</span> <span class="string">zip</span> <span class="string">&gt; /dev/null</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">  - eval $(ssh-agent -s)</span></span><br><span class="line"><span class="string">  - echo "$SSH_PRIVATE_KEY" | ssh-add -</span></span><br><span class="line"><span class="string">  - |-</span></span><br><span class="line"><span class="string">    if [ "$(type aws)" = "" ]; then</span></span><br><span class="line"><span class="string">      apk --update add --no-cache python3 &gt; /dev/null</span></span><br><span class="line"><span class="string">      pip3 install --upgrade --no-cache-dir pip awscli</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">  - mkdir -p ~/.ssh</span></span><br><span class="line"><span class="string">  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" &gt; ~/.ssh/config</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">apply</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apply-job:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">apply</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">date</span></span><br><span class="line">  <span class="comment">#適宜に変更</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">clone</span> <span class="attr">ssh://git@git.XXXXXXXXX.demo-nginx.git</span> <span class="string">/docker_image</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cd</span> <span class="string">/docker_image</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">rev-parse</span> <span class="string">HEAD</span> <span class="string">| cut -c 1-8 &gt; git-commit-hash.txt</span></span><br><span class="line"><span class="string">  - zip -r9 /tmp/$&#123;UPLOAD_FILE_ALL&#125;  ./* &gt; /dev/null</span></span><br><span class="line"><span class="string">  - export AWS_ACCESS_KEY_ID=$&#123;AWS_ACCESS_KEY&#125;</span></span><br><span class="line"><span class="string">  - export AWS_SECRET_ACCESS_KEY=$&#123;AWS_SECRET_KEY&#125;</span></span><br><span class="line"><span class="string">  - date</span></span><br><span class="line"><span class="string">  - aws s3 cp /tmp/$&#123;UPLOAD_FILE_ALL&#125;  s3://$&#123;UPLOAD_BUCKET&#125;/$&#123;UPLOAD_FOLDER&#125;/$&#123;UPLOAD_FILE_ALL&#125;  --region $&#123;UPLOAD_REGION&#125;</span></span><br><span class="line"><span class="string"></span><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>ご察しの通り、branchがmasterにmergeした時、CIが回され、<br>すべてのファイルをzipに固め、s3の指定bucketにコピーする仕組みとなっています。  </p><h2 id="成果物"><a href="#成果物" class="headerlink" title="成果物"></a>成果物</h2><ul><li>Dockerfileを含め、工程必要ファイル一式をまとめたzipファイル</li></ul><h1 id="buildステージ"><a href="#buildステージ" class="headerlink" title="buildステージ"></a>buildステージ</h1><p>このステージで、copyされたzipファイルを基づいて、docker imageをbuildする。  </p><h2 id="必要ファイルとvars-1"><a href="#必要ファイルとvars-1" class="headerlink" title="必要ファイルとvars"></a>必要ファイルとvars</h2><ul><li>CODE_PACKAGE_NAME: “docker_image.zip”(※S3指定バケット内、gitlab-ci出力されたファイル)</li><li>GIT_COMMIT_HASH_FILE: “git-commit-hash.txt”(※image最新タグを保存する一時ファイル名)</li><li>buildspec.yml(build工程定義ファイル)<h2 id="buildspec-ymlサンプル"><a href="#buildspec-ymlサンプル" class="headerlink" title="buildspec.ymlサンプル"></a>buildspec.ymlサンプル</h2></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">0.2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">  variables:</span></span><br><span class="line">  <span class="comment">#適宜に変更</span></span><br><span class="line"><span class="attr">    CODE_PACKAGE_NAME:</span> <span class="string">"docker_image.zip"</span></span><br><span class="line"><span class="attr">    GIT_COMMIT_HASH_FILE:</span> <span class="string">"git-commit-hash.txt"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">phases:</span></span><br><span class="line"><span class="attr">  install:</span></span><br><span class="line"><span class="attr">    commands:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">echo</span> <span class="string">`date`</span> <span class="string">Starting</span> <span class="string">install</span> <span class="string">phase...</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">echo</span> <span class="string">`date`</span> <span class="string">Finished</span> <span class="string">install</span> <span class="string">phase...</span></span><br><span class="line"><span class="attr">  pre_build:</span></span><br><span class="line"><span class="attr">    commands:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">echo</span> <span class="string">`date`</span> <span class="string">Starting</span> <span class="string">pre_build</span> <span class="string">phase...</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">echo</span> <span class="string">Logging</span> <span class="string">in</span> <span class="string">to</span> <span class="string">Amazon</span> <span class="string">ECR...</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$(aws</span> <span class="string">ecr</span> <span class="string">get-login</span> <span class="bullet">--no-include-email</span> <span class="bullet">--region</span> <span class="string">$AWS_DEFAULT_REGION)</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">echo</span> <span class="string">`date`</span> <span class="string">Finished</span> <span class="string">pre_build</span> <span class="string">phase...</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    commands:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">echo</span> <span class="string">`date`</span> <span class="string">Starting</span> <span class="string">build</span> <span class="string">phase...</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">COMMIT_HASH=`cat</span> <span class="string">$&#123;GIT_COMMIT_HASH_FILE&#125;`</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">echo</span> <span class="string">Building</span> <span class="string">the</span> <span class="string">Docker</span> <span class="string">image...</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">ECR_REPO_URL=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">docker</span> <span class="string">build</span> <span class="bullet">--no-cache=true</span> <span class="bullet">--tag</span> <span class="string">$ECR_REPO_URL:$IMAGE_TAG</span> <span class="bullet">--tag</span> <span class="string">$ECR_REPO_URL:$COMMIT_HASH</span> <span class="string">.</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">echo</span> <span class="string">`date`</span> <span class="string">Finished</span> <span class="string">build</span> <span class="string">phase...</span></span><br><span class="line"><span class="attr">  post_build:</span></span><br><span class="line"><span class="attr">    commands:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">echo</span> <span class="string">`date`</span> <span class="string">Starting</span> <span class="string">post_build</span> <span class="string">phase...</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">COMMIT_HASH=`cat</span> <span class="string">$&#123;GIT_COMMIT_HASH_FILE&#125;`</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">ECR_REPO_URL=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">echo</span> <span class="string">Pushing</span> <span class="string">the</span> <span class="string">Docker</span> <span class="string">image...</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">$ECR_REPO_URL:$COMMIT_HASH</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">$ECR_REPO_URL:$IMAGE_TAG</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">printf</span> <span class="string">'&#123;"Version":"1.0","ImageURI":"%s"&#125;'</span> <span class="string">$ECR_REPO_URL:$COMMIT_HASH</span> <span class="string">&gt; imageDetail.json</span></span><br><span class="line"><span class="string">      - echo `date` Finished post_build phase...</span></span><br><span class="line"><span class="string"></span><span class="attr">artifacts:</span></span><br><span class="line"><span class="attr">  files:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">imageDetail.json</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">taskdef.json</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">appspec.yml</span></span><br></pre></td></tr></table></figure><h2 id="成果物-1"><a href="#成果物-1" class="headerlink" title="成果物"></a>成果物</h2><ul><li>docker image<ul><li>{ECR_URL}:latest</li><li>{ECR_URL}:commit_hash</li></ul></li><li>next stage用ファイル<ul><li>imageDetail.json</li><li>taskdef.json</li><li>appspec.yml</li></ul></li></ul><h1 id="deployステージ"><a href="#deployステージ" class="headerlink" title="deployステージ"></a>deployステージ</h1><p>このステージで、buildされたimageをECSクラスターにdeploy.<br>appspec.ymlとtaskdef.jsonの組み合わせで、deploy先を特定し、<br>imageDetail.jsonはimageのURL（tagを含む）を特定する。</p><h2 id="必要ファイルとvars-2"><a href="#必要ファイルとvars-2" class="headerlink" title="必要ファイルとvars"></a>必要ファイルとvars</h2><ul><li>taskdef.jsonファイル内<ul><li>実行ARN</li><li>containname</li><li>cloudwatch logグループ関連name</li><li>taskdefinitionのfamily名</li></ul></li><li>appspec.ymlファイル内<ul><li>LBのコンテナ名</li></ul></li></ul><h2 id="appspec-ymlサンプル"><a href="#appspec-ymlサンプル" class="headerlink" title="appspec.ymlサンプル"></a>appspec.ymlサンプル</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">0.0</span></span><br><span class="line"><span class="attr">Resources:</span></span><br><span class="line"><span class="attr">  - TargetService:</span></span><br><span class="line"><span class="attr">      Type:</span> <span class="attr">AWS::ECS::Service</span></span><br><span class="line"><span class="attr">      Properties:</span></span><br><span class="line">        <span class="comment">#&lt;TASK_DEFINITION&gt;変更しないで、そのまま</span></span><br><span class="line"><span class="attr">        TaskDefinition:</span> <span class="string">"&lt;TASK_DEFINITION&gt;"</span></span><br><span class="line"><span class="attr">        LoadBalancerInfo:</span></span><br><span class="line">        <span class="comment">#適宜に変更</span></span><br><span class="line"><span class="attr">          ContainerName:</span> <span class="string">"application"</span></span><br><span class="line"><span class="attr">          ContainerPort:</span> <span class="string">"80"</span></span><br></pre></td></tr></table></figure><h2 id="taskdef-jsonサンプル"><a href="#taskdef-jsonサンプル" class="headerlink" title="taskdef.jsonサンプル"></a>taskdef.jsonサンプル</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    //適宜に変更</span><br><span class="line">  "executionRoleArn": "arn:aws:iam::XXXXX:role/ecsTaskExecutionRole",</span><br><span class="line">  "containerDefinitions": [</span><br><span class="line">    &#123;</span><br><span class="line">        //適宜に変更</span><br><span class="line">      "name": "application",</span><br><span class="line">      "image": "&lt;IMAGE1_NAME&gt;",</span><br><span class="line">      "portMappings": [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"containerPort"</span>: <span class="number">80</span>,</span><br><span class="line">          <span class="attr">"hostPort"</span>: <span class="number">80</span>,</span><br><span class="line">          <span class="attr">"protocol"</span>: <span class="string">"tcp"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      "logConfiguration": &#123;</span><br><span class="line">        "logDriver": "awslogs",</span><br><span class="line">        "options": &#123;</span><br><span class="line">            //適宜に変更</span><br><span class="line">            "awslogs-group": "/ecs/web",</span><br><span class="line">            "awslogs-region": "ap-northeast-1",</span><br><span class="line">            "awslogs-stream-prefix": "container"</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      "essential": true</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  //fargateを使います</span><br><span class="line">  "requiresCompatibilities": ["FARGATE"],</span><br><span class="line">  "networkMode": "awsvpc",</span><br><span class="line">  "cpu": "256",</span><br><span class="line">  "memory": "512",</span><br><span class="line">  //適宜に変更</span><br><span class="line">  "family": "web"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="成果物-2"><a href="#成果物-2" class="headerlink" title="成果物"></a>成果物</h2><ul><li>Blue/Green deployを経て、置き換えられたコンテナ</li></ul><h1 id="最終成果物"><a href="#最終成果物" class="headerlink" title="最終成果物"></a>最終成果物</h1><h2 id="パイプライン"><a href="#パイプライン" class="headerlink" title="パイプライン"></a>パイプライン</h2><p><img src="ci2.jpg" alt="codepipeline"></p><h2 id="WebPage"><a href="#WebPage" class="headerlink" title="WebPage"></a>WebPage</h2><p>予め用意したALBにアクセスすると、カスタマイズしたnginx画面が表示された。<br><img src="ci3.jpg" alt="web"></p><p><strong>これで大成果です！お疲れ様〜</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;気がついたら、2020年の1月ってブログ更新ナーシング！これはヤバい……&lt;br&gt;何とかしないと、もうこのブロクの更新が停止しまいそうー&lt;br&gt;とりあえず、書こう。&lt;/p&gt;
    
    </summary>
    
      <category term="infra" scheme="http://kuritan.github.io/categories/infra/"/>
    
    
      <category term="JP" scheme="http://kuritan.github.io/tags/JP/"/>
    
      <category term="aws" scheme="http://kuritan.github.io/tags/aws/"/>
    
      <category term="CI/CD" scheme="http://kuritan.github.io/tags/CI-CD/"/>
    
      <category term="docker" scheme="http://kuritan.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>2019年も、終わりに近づいている</title>
    <link href="http://kuritan.github.io/2019%E5%B9%B4%E3%82%82%E3%80%81%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB%E8%BF%91%E3%81%A5%E3%81%84%E3%81%A6%E3%81%84%E3%82%8B/"/>
    <id>http://kuritan.github.io/2019年も、終わりに近づいている/</id>
    <published>2019-12-18T07:14:59.000Z</published>
    <updated>2023-02-07T06:29:58.241Z</updated>
    
    <content type="html"><![CDATA[<p>年末年始の休み気分になる前に、今年、自分の周辺に起こった事を整理したく、こちらのブログを書きました。<br>つまらぬ事ばっかりですが、少しだけのお時間、頂戴したいと思います。</p><a id="more"></a><h1 id="Life"><a href="#Life" class="headerlink" title="Life"></a>Life</h1><h2 id="VISA"><a href="#VISA" class="headerlink" title="VISA"></a>VISA</h2><p>Tokyoで働く外国人として、今年無事在留期間が更新され、5年有効のモノをいただきました。<br>これで安心して、少なくとも日本でまだ5年間働けるようになりました。  </p><p>また、当分野の実務経験も積んで、来年末そろそろ高度人材VISAを申請できる時期になりそうで、永住資格もそう遠くない感じですね。</p><h2 id="Career"><a href="#Career" class="headerlink" title="Career"></a>Career</h2><p>今年の春頃、今の会社に転職して、情シスのエンジニアもどき(?w)から、偽SRE（??w）にロールチェンジしました。  </p><blockquote><p>SREはSite Reliability Engineering(or Engineer)の略  </p></blockquote><p>当時のお話は<a href="https://kuritan.github.io/%E8%BB%A2%E8%81%B7%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/">こちらのブログ</a>に書かせていただきましたので、<br>ご参考になっていただけたら、嬉しい限りです。<br><img src="1.jpg" alt="office&#39;s window view"></p><h2 id="Family"><a href="#Family" class="headerlink" title="Family"></a>Family</h2><p>彼女とネコ一匹、たまにケンカするんですが、小さな幸せを感じながら、東京生活満喫しています。</p><blockquote><p>猫はノルウェージャンフォレストキャット、とても肥満な体で、我が家では最近、「豚」呼ばわりとされている</p></blockquote><h1 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h1><p>WEB界隈のエンジニアとして、今年自分が触った技術類のモノも一応まとめます。</p><h2 id="Cloud-amp-VPS"><a href="#Cloud-amp-VPS" class="headerlink" title="Cloud &amp; VPS"></a>Cloud &amp; VPS</h2><h3 id="業務"><a href="#業務" class="headerlink" title="業務"></a>業務</h3><ul><li>AWS</li><li>GCP</li><li>IDCF</li><li>IIJ(GIO)</li></ul><h3 id="趣味"><a href="#趣味" class="headerlink" title="趣味"></a>趣味</h3><ul><li>Arukas</li><li>Vultr</li></ul><p>主に上記となりますが、割合としてやっぱりAWSが一番使わせていただき、GCPは主にGKE、Spanner、GAEを中心に注力しております。<br>もちろん、ポチポチもあるんですが、terraformを駆使し、リソースの自動作成や冪等性維持に注意を払っています。  </p><p>今の部署に入ってから、<br>ツール類のキャッチアップ -&gt; 社内用サービスの改修&amp;クラウド移行 -&gt; <a href="https://kuritan.github.io/%E6%9C%AC%E7%95%AA%E7%92%B0%E5%A2%83%E3%81%AE%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%AF%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E9%96%93%E7%A7%BB%E8%A1%8C/">本番サービスのメンテ対応＆移行</a> -&gt; ……<br>などを経て、今期からガチの本番サービスインフラ担当者となりました。<br>また、kubernetesをベースにしたマイクロサービス化も注力しつつ、EKS(AWS)やGCP(GKE)、あとRancherも触ったりとかしています。<br>うゎ〜この先も頑張らないとっ！  </p><h2 id="Programming"><a href="#Programming" class="headerlink" title="Programming"></a>Programming</h2><ul><li>Shell</li><li>Python</li><li>Ruby on Rails</li><li>Golang</li><li>TypeScript</li></ul><p>社内は主にRuby on Railsがメインとなっていますが、様々な言語やフレームワークにもアプローチされている。<br>正直、会社に入ってすぐ、<a href="https://kuritan.github.io/GAE%E3%81%A8Acmesmith%E4%BD%BF%E3%81%A3%E3%81%A6Serverless%E3%81%AESSL%E8%A8%BC%E6%98%8E%E6%9B%B8%E5%8F%96%E5%BE%97%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%92%E4%BD%9C%E3%82%8D%E3%81%86/">Ruby On Railsの古いアプリをGAEに移行し、サーバレス改修頼むぞ</a>や<a href="https://kuritan.github.io/Gyazo-SS%E8%B6%85%E4%BE%BF%E5%88%A9%E3%81%AB%E5%85%B1%E6%9C%89%E3%81%99%E3%82%8B%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9-%E3%82%92%E3%82%B5%E3%83%BC%E3%83%90%E3%83%AC%E3%82%B9%E3%81%A7%E6%A7%8B%E7%AF%89%E3%81%97%E3%81%BE%E3%81%99%E3%83%BC/">費用削減で社内用のサービスアーキテクチャ見直しよろしく</a>って言われた時、結構ヒヤヒヤしましたね。<br>幸い、大きなトラブルなく、段々と会社の技術ストックに馴染み始めました。  </p><h2 id="DevOps-SRE"><a href="#DevOps-SRE" class="headerlink" title="DevOps(SRE)"></a>DevOps(SRE)</h2><p>現職は社外向けのサービスインフラを支える技術職で、いわゆるSRE（Site Reliability Engineer）の定義に近い存在です。<br>DevelopmentもOperationsも、自分らでやる立場となっており、サービスの可用性や品質を向上するため、なんでもやれー的なポジションですね。  </p><p>以前と比べて、結構codeレベルでOSSの挙動を探ったり、DBの内部を覗くようになりました。<br>例えば、ついこの間も<a href="https://kuritan.github.io/MySQL%E3%82%AB%E3%83%A9%E3%83%A0%E3%82%B5%E3%82%A4%E3%82%BA%E3%81%8C%E3%83%87%E3%82%AB%E3%81%99%E3%81%8E%E3%81%9F%E4%BB%B6/">MySQLの難題</a>に引っかかっていました。<br>この類の問題は、ほぼ毎日のように、遭遇しちゃう感じですね。  </p><p>クラウドプロバイダーの新しいサービスや機能がリリースされたら、それに活用する方法も考えたりして、費用削減＆面倒退治にとことん追求しています。  </p><ul><li><a href="https://kuritan.github.io/AWS-Config%E3%81%A8Lambda%E4%BD%BF%E3%81%A3%E3%81%A6%E5%85%A8%E9%96%8B%E6%94%BE%E3%83%9D%E3%83%BC%E3%83%88-0-0-0-0-0-%E3%82%92%E6%8A%B9%E6%AE%BA%E3%81%97%E3%82%88%E3%81%86/">全開放のSGの抹殺</a></li></ul><p>チーム全体はInfrastructure as Codeをポリシーとした構成管理を行って、スケールしやすい構成となっています。  </p><ul><li>Gitlab/Github</li><li>Terraform, Packer</li><li>Ansible, Chef(Itamae)</li><li>Mackerel, Zabbix, Pagerduty, NewRelic</li><li>MySQL, Redis, Memcached</li><li>Vagrant, Docker, Kubernetes, Openstack</li></ul><p>基本は上記ですが、各種ミドルウェアを中心に、随時新しい技術や製品の評価＆選定を行っている。  </p><blockquote><p>この間、macOSをcataliaにあげて、sidecar機能を試した時のMyデスク  </p></blockquote><p><img src="2.jpg" alt="mydesk"></p><p>来年の重心はたぶん下記となるので、仕事量半端ないっすね。</p><ul><li>基盤SLAの測定方法の確定と実績測定</li><li>CloudSpanner(GCP)の考察と導入</li><li>GKE(GCP)の運用方法検討</li><li>Fargate for EKS(AWS)の運用方法検討</li><li>社内k8s環境Rancher(EKSベース)の整備</li><li>本番サービス全面マイクロサービス化に伴い、ベストプラクティス検討</li><li>会社標準dockerイメージの定義と提供</li><li>アプリ開発陣の説明</li></ul><h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><h3 id="Public"><a href="#Public" class="headerlink" title="Public"></a>Public</h3><ul><li><a href="https://kuritan.github.io/AWS%20Summit%202019%20@Tokyo%E3%81%AB%E8%A1%8C%E3%81%8D%E3%81%BE%E3%81%97%E3%81%9F/">AWS Summit 2019 @Tokyo</a></li><li><a href="https://kuritan.github.io/Google-Cloud-Next-19-in-Tokyo%E3%81%AB%E8%A1%8C%E3%81%8D%E3%81%BE%E3%81%97%E3%81%9F%EF%BC%81/">Google Cloud Next’19 @Tokyo</a></li></ul><p>AWSとGCPのイベントに行って、勉強になるセッションはたくさんありました。<br>いつか、その舞台に立って、自分のノウハウをシェアできるように日々チームメンバーと切磋琢磨してますー  </p><h3 id="Private"><a href="#Private" class="headerlink" title="Private"></a>Private</h3><ul><li><a href="https://kuritan.github.io/kubernetes%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E7%A4%BE%E5%86%85%E7%99%BA%E8%A1%A8%E3%81%97%E3%81%9F/">kubernetesについて社内発表した</a></li></ul><p>入社後の初露出として、kubernetesについての初歩的な内容を発表しました。  </p><p>今後20年のLinuxと呼ばれるkubernetesですが、<br>関連パーツやエコシステムがあまりにも膨大で、自分はまだ右も左も分からない状態で、よく痛感しています。<br>余力のある方には、ぜひkubernetesをチャレンジしてみてください。やっておくと、絶対損はないですよ。<br>P.S. 基本的にはGKEがおすすめですー  </p><h1 id="Tour"><a href="#Tour" class="headerlink" title="Tour"></a>Tour</h1><h2 id="Deutschland-Germany"><a href="#Deutschland-Germany" class="headerlink" title="Deutschland(Germany)"></a>Deutschland(Germany)</h2><p>夏休みで、彼女と二人海外旅行に行きました。<br>ずっとヨーロッパに興味津々の僕にとっては、本当にすばらしい思い出でした。  </p><ul><li><a href="https://kuritan.github.io/%E5%A4%8F%E4%BC%91%E3%81%BF%E3%80%81%E3%83%89%E3%82%A4%E3%83%84%E3%81%AB%E8%A1%8C%E3%81%93%E3%81%86%E3%83%BC%E3%83%87%E3%83%A5%E3%83%83%E3%82%BB%E3%83%AB%E3%83%89%E3%83%AB%E3%83%95%E7%B7%A8/">デュッセルドルフ</a></li><li><a href="https://kuritan.github.io/%E5%A4%8F%E4%BC%91%E3%81%BF%E3%80%81%E3%83%89%E3%82%A4%E3%83%84%E3%81%AB%E8%A1%8C%E3%81%93%E3%81%86%E3%83%BC%E3%83%9F%E3%83%A5%E3%83%B3%E3%83%98%E3%83%B3%E7%B7%A8/">ミュンヘン</a></li></ul><p>特に、夜21時過ぎ、太陽を見ならが夕飯を食べる体験で、かなり不思議の気分でした。</p><blockquote><p>ドイツは高緯度地域ので、夏の日照時間が長い</p></blockquote><h2 id="HasBeenTo"><a href="#HasBeenTo" class="headerlink" title="HasBeenTo"></a>HasBeenTo</h2><p>スマホアプリで、自分が飛行機で行ったことのあるところを記録できるモノがあって、<br>よくみたら、僕も5国(地域)に行ったりしたんですね。  </p><ul><li>中国内</li><li>日本内</li><li>香港・マカオ</li><li>ドイツ</li><li>オーストリア</li></ul><h3 id="暫定合計"><a href="#暫定合計" class="headerlink" title="暫定合計"></a>暫定合計</h3><ul><li>マイル：63,534 km</li><li>飛行回数：30 回</li><li>国(地域)：5 箇所</li><li>都市：11 箇所</li></ul><p><img src="3.jpg" alt="flight"></p><h2 id="Languages"><a href="#Languages" class="headerlink" title="Languages"></a>Languages</h2><h3 id="English"><a href="#English" class="headerlink" title="English"></a>English</h3><p>海外旅行もしてて、やはり英語の重要性に気が付きますね。<br>ITの世界は、しばらく欧米を中心とする態勢が変わることが難しいそうなので、<br>ガチでEnglishを勉強しないと、そのうち時代遅れになりかねないかもしれません。  </p><h3 id="Japanese"><a href="#Japanese" class="headerlink" title="Japanese"></a>Japanese</h3><p>最近ではないが、段々と自覚しています、自分の日本語はまだまだということ。<br>いい感じに自分の意図や考えをお伝えできず、皆様にご迷惑かけたことを深くお詫び申し上げます。<strong>さっせんでしたー</strong><br>自分の仕事の話は大体できるようになりつつ、今後がカルチャーやギャグにアプローチしてみようと思います。  </p><h1 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h1><p>最後に、こちらのブログを含め、今年はなんと！12回も更新させていただきました！<br>ちょうど1ヶ月1回の頻度で、自分の中では、いい感じに年を締めくぐったつもりですね。  </p><p><strong>来年も、よろしお願いいたします！</strong>  </p><blockquote><p>【よっしゃ！ブログ更新するぞー】  </p></blockquote><p><img src="4.jpg" alt="update"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;年末年始の休み気分になる前に、今年、自分の周辺に起こった事を整理したく、こちらのブログを書きました。&lt;br&gt;つまらぬ事ばっかりですが、少しだけのお時間、頂戴したいと思います。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://kuritan.github.io/categories/Life/"/>
    
    
      <category term="JP" scheme="http://kuritan.github.io/tags/JP/"/>
    
      <category term="Work" scheme="http://kuritan.github.io/tags/Work/"/>
    
      <category term="Tour" scheme="http://kuritan.github.io/tags/Tour/"/>
    
  </entry>
  
  <entry>
    <title>MySQLカラムサイズがデカすぎた件</title>
    <link href="http://kuritan.github.io/MySQL%E3%82%AB%E3%83%A9%E3%83%A0%E3%82%B5%E3%82%A4%E3%82%BA%E3%81%8C%E3%83%87%E3%82%AB%E3%81%99%E3%81%8E%E3%81%9F%E4%BB%B6/"/>
    <id>http://kuritan.github.io/MySQLカラムサイズがデカすぎた件/</id>
    <published>2019-12-05T06:32:01.000Z</published>
    <updated>2023-02-07T06:29:58.257Z</updated>
    
    <content type="html"><![CDATA[<p>古いrailsアプリをrancher(kubernetes)でデプロイしようと、頑張ってコンテナ化の改造を何日やって参りました。<br>なぜかmysql周りで手こずったので、対処方法をここでメモします。<br>同じようなエラーで脳細胞を酷使する人がないよう、お祈り申し上げます。</p><a id="more"></a><h1 id="APP周りdependencies"><a href="#APP周りdependencies" class="headerlink" title="APP周りdependencies"></a>APP周りdependencies</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ruby v2.2.x</span><br><span class="line">    bundler</span><br><span class="line"></span><br><span class="line">mysql v5.x</span><br><span class="line"></span><br><span class="line">redis v3.x</span><br><span class="line"></span><br><span class="line">elasticsearch v1.x</span><br><span class="line">    kuromoji analysis plugin</span><br><span class="line"></span><br><span class="line">nodejs 0.10.x</span><br><span class="line"></span><br><span class="line">npm</span><br><span class="line"></span><br><span class="line">mecab</span><br><span class="line"></span><br><span class="line">libreoffice</span><br><span class="line"></span><br><span class="line">poppler</span><br></pre></td></tr></table></figure><p>……すごっ！いっぱいー</p><h1 id="早速問題だ"><a href="#早速問題だ" class="headerlink" title="早速問題だ"></a>早速問題だ</h1><p>コンテナ化ですから、コンテナ環境でアプリを立ち上げようぜー<br>……<br>……<br>……<br>まぁ、いっぱいやりました～（雑すぎ）  </p><p>重要なのは、DB周りだー </p><h2 id="Unsupport-utf"><a href="#Unsupport-utf" class="headerlink" title="Unsupport utf"></a>Unsupport utf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake db:createしようとしたら、エラー！</span><br></pre></td></tr></table></figure><p><img src="db1.jpg" alt="UTF_unsupport"><br>utf charsetサポートされていないって、そんなバカな！</p><p>ちょっとconfig/database.ymlをいじってみよう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">default: &amp;default</span><br><span class="line">  adapter: mysql2</span><br><span class="line">  encoding: utf8mb4                 #utfから変更した</span><br><span class="line">  charset: utf8mb4                  #追加した</span><br><span class="line">  collation: utf8mb4_general_ci     #追加した</span><br><span class="line">  pool: 5</span><br><span class="line">  username: root</span><br><span class="line">  password:</span><br><span class="line">  socket: /var/run/mysqld/mysqld.sock</span><br><span class="line"></span><br><span class="line">production:</span><br><span class="line">  &lt;&lt;: *default</span><br><span class="line">  database: app_production</span><br><span class="line">  host: &lt;%= ENV[&apos;RDS_ENDPOINT&apos;] %&gt;</span><br><span class="line">  username: root</span><br><span class="line">  password: &lt;%= ENV[&apos;DATABASE_PASSWORD&apos;] %&gt;</span><br></pre></td></tr></table></figure><p>utf -&gt; utf8mb4に変更したらどうだ！喰らえー<br>まぁ、無事DBが作られた。セーフー<br>続いて〜db:migrate</p><h2 id="column-size-too-large"><a href="#column-size-too-large" class="headerlink" title="column size too large"></a>column size too large</h2><p>またエラーだ！！！<br>今回のエラーメッセージがめちゃくちゃ長い！<br><img src="db2.jpg" alt="column_size_too_large"></p><p>……むむ……<br>どういう事だ……さっぱりわからん。<br>要は、utf8mb4だと、カラムのバイト数オーバーでしょう。  </p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p><a href="https://qiita.com/xhnagata/items/4d5c3333cbae53888f37" target="_blank" rel="noopener">参考情報源</a>  </p><blockquote><p>ActiveRecordのstring型カラムがvarchar(255)で定義されるので、utf8mb4ではインデックスのキープレフィックスが767byteを超えてしまう。</p></blockquote><blockquote><p>MySQL5.7未満では、テーブル作成時にROW_FORMAT=DYNAMICを渡してやらなければならない。</p></blockquote><blockquote><p>Rails4だとモンキーパッチを使って、テーブル作成時のオプションにROW_FORMAT=DYNAMICを追加してやる</p></blockquote><p>じゃ、手を打うー<br>database(mysql)の設定を見直し、767超えても大丈夫なように、ファイルフォーマットをAntelopeからBarracudaに変更。<br>AWS RDSを使っているので、パラメータグループで、「innodb_file_format」を「Barracuda」を指定する。  </p><p>また、config/initializers/ar_innodb_row_format.rbを追加し、デフォルトのテーブル作成時の<br>ROW_FORMATをCOMPACT -&gt; DYNAMICに指定変更</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">module InnodbRowFormat</span><br><span class="line">  def create_table(table_name, options = &#123;&#125;)</span><br><span class="line">    table_options = options.merge(options: &apos;ENGINE=InnoDB ROW_FORMAT=DYNAMIC&apos;)</span><br><span class="line">    super(table_name, table_options) do |td|</span><br><span class="line">      yield td if block_given?</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">ActiveSupport.on_load :active_record do</span><br><span class="line">  module ActiveRecord::ConnectionAdapters</span><br><span class="line">    class AbstractMysqlAdapter</span><br><span class="line">      prepend InnodbRowFormat</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>これでイケるはず！</p><h2 id="retry"><a href="#retry" class="headerlink" title="retry!"></a>retry!</h2><p>直前失敗したので、rake db:migrate:resetにする。</p><p><img src="db3.jpg" alt="migrate"></p><p>やった！！！！！作られた！！！！</p><h1 id="それで？"><a href="#それで？" class="headerlink" title="それで？"></a>それで？</h1><p>引き続き、コンテナ改造続行します。<br>何か別のネタがあたっら、またここでシェアしますんで、ご期待のないようにお待ち下さいw</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;古いrailsアプリをrancher(kubernetes)でデプロイしようと、頑張ってコンテナ化の改造を何日やって参りました。&lt;br&gt;なぜかmysql周りで手こずったので、対処方法をここでメモします。&lt;br&gt;同じようなエラーで脳細胞を酷使する人がないよう、お祈り申し上げます。&lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="http://kuritan.github.io/categories/dev/"/>
    
    
      <category term="JP" scheme="http://kuritan.github.io/tags/JP/"/>
    
      <category term="database" scheme="http://kuritan.github.io/tags/database/"/>
    
      <category term="rails" scheme="http://kuritan.github.io/tags/rails/"/>
    
      <category term="ruby" scheme="http://kuritan.github.io/tags/ruby/"/>
    
  </entry>
  
  <entry>
    <title>AWS ConfigとLambda使って全開放ポート(0.0.0.0/0に向けた)を抹殺しよう</title>
    <link href="http://kuritan.github.io/AWS-Config%E3%81%A8Lambda%E4%BD%BF%E3%81%A3%E3%81%A6%E5%85%A8%E9%96%8B%E6%94%BE%E3%83%9D%E3%83%BC%E3%83%88-0-0-0-0-0-%E3%82%92%E6%8A%B9%E6%AE%BA%E3%81%97%E3%82%88%E3%81%86/"/>
    <id>http://kuritan.github.io/AWS-ConfigとLambda使って全開放ポート-0-0-0-0-0-を抹殺しよう/</id>
    <published>2019-11-07T09:17:34.000Z</published>
    <updated>2023-02-07T06:29:58.245Z</updated>
    
    <content type="html"><![CDATA[<p>突然ですが、こんなお悩みがお持ちでしょうか。</p><ul><li>社内developer共用のAWSアカウントを作って、クラウド知識を社内に布教しようと思った</li><li>勝手に全開放(ingress 0.0.0.0/0)のSecurityGroupが適用された</li><li>気づいたら、もうインターネットで天然のハニーポット扱い</li></ul><p>こんなアナタに、今日の品物をオススメします！</p><a id="more"></a><h1 id="機能紹介"><a href="#機能紹介" class="headerlink" title="機能紹介"></a>機能紹介</h1><ul><li>AWS Configを利用しSecurityGroupを常時監視し、ingressで0.0.0.0/0 allowのルールを検索</li><li>発見次第、SNS経由で発信</li><li>予め設置したlambda関数がトリガーされ、該当全開放ルールをリプレース</li><li>インシデントマネジャーからアラート受信（オプション）</li></ul><p><img src="config1.jpg" alt="全体イメージ"></p><h1 id="どうやって使うの？"><a href="#どうやって使うの？" class="headerlink" title="どうやって使うの？"></a>どうやって使うの？</h1><p>基本は全部githubにあげて、READMEに記載しましたが、ちょっとだけ解説します。<br>セルフサービスの方は、下記リンクへどうぞ<br><strong><a href="https://github.com/kuritan/aws_config_replace_unauthorized_ports" target="_blank" rel="noopener">Github repo</a></strong></p><h2 id="AWS-Config"><a href="#AWS-Config" class="headerlink" title="AWS Config"></a>AWS Config</h2><p>まず、Config機能を有効化し、EC2リソースにモニタリングできるように設定してください。（全リソースでも構いませんが、費用感が若干違う）</p><h2 id="費用感"><a href="#費用感" class="headerlink" title="費用感"></a>費用感</h2><p><a href="https://aws.amazon.com/jp/config/pricing/" target="_blank" rel="noopener">AWS Config料金</a><br>新料金プランになってから、だいぶ安くなりました。<br>LambdaFunctionも使い道よりますが、たいていは安価のイメージで、料金について、あんまり心配する必要がない風に考えています。<br>参考までに、月間 $5 前後の感じですかね。</p><h2 id="AWS-Config-Rule"><a href="#AWS-Config-Rule" class="headerlink" title="AWS Config Rule"></a>AWS Config Rule</h2><p>ルールを新規追加しましょう。<br>AWS提供のモノで大丈夫です、名前は「VPC_SG_OPEN_ONLY_TO_AUTHORIZED_PORTS」  </p><p><img src="config2.jpg" alt="config"></p><h2 id="AWS-Config-Rule-修復アクション"><a href="#AWS-Config-Rule-修復アクション" class="headerlink" title="AWS Config Rule 修復アクション"></a>AWS Config Rule 修復アクション</h2><p>ここは、今回の肝ですね。<br>AWS提供の修復アクションはいろいろあって、中に「vpc-sg-open-only-to-authorized-ports」こいうものが使いそうだが、実際やってみました。<br>結果、駄目でしたー<br>何が駄目というと、デフォルトVPC以外のSecurityGroupには対応できないことです。<br>これじゃ監視の意味が薄いので、VPC関係なく対応してもらいたいですね。<br>ここは、やはり自前でlambda関数で対応する道を選びました。  </p><p>ちょっと話が長くなたっが、ここで「PublishSNSNotification」という修復アクションを選択してください。<br>もちろん、それに合わせてIAMロールも準備してあげてくださいね。<br><img src="config3.jpg" alt="config rule"></p><p>修復アクションの実行履歴は、AWS SystemManagerで確認できます。</p><h2 id="AWS-SNS-トピック"><a href="#AWS-SNS-トピック" class="headerlink" title="AWS SNS トピック"></a>AWS SNS トピック</h2><p>新規SNSトピックを作りましょう。<br>あとで、lambda関数とインシデントマネジャーをこちらのサブスクリプションに入れるような感じですね。</p><h2 id="AWS-Lambda-Function"><a href="#AWS-Lambda-Function" class="headerlink" title="AWS Lambda Function"></a>AWS Lambda Function</h2><p>コードは以下となります。<br>ENVとして、authorized_global_ipv4を設定しましょう。(0.0.0.0/0にリプレースするIPに設定、例えばオフィス拠点のグローバルIP)<br>unauthorized_ipv4 は明示的に0.0.0.0/0を表明するためのもので、素直に0.0.0.0/0に設定してくださいね。</p><p>元々全VPC対応したいから自前でやるので、関数を非VPCにしてから、IAMはお任せしますね。</p><p>Runtime: Python3.6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import json</span><br><span class="line">import boto3</span><br><span class="line"> </span><br><span class="line">def lambda_handler(event, context):</span><br><span class="line">    message_unicode = event[&apos;Records&apos;][0][&apos;Sns&apos;][&apos;Message&apos;]</span><br><span class="line">    print(message_unicode)</span><br><span class="line">    id = message_unicode.strip(&apos;&#123; &quot;&apos;).strip(&apos;&quot;&#125;&apos;)</span><br><span class="line">    print(id)</span><br><span class="line"></span><br><span class="line">    unauthorized_ipv4 = os.environ[&apos;unauthorized_ipv4&apos;]</span><br><span class="line">    authorized_global_ipv4 = os.environ[&apos;global_ipv4&apos;]</span><br><span class="line"></span><br><span class="line">    describe_sg_all = boto3.client(&apos;ec2&apos;)</span><br><span class="line">    handle_sg_all = boto3.resource(&apos;ec2&apos;)</span><br><span class="line">    describe_sg = describe_sg_all.describe_security_groups(GroupIds=[id])</span><br><span class="line">    handle_sg = handle_sg_all.SecurityGroup(id)</span><br><span class="line">    </span><br><span class="line">    print(describe_sg)</span><br><span class="line">    </span><br><span class="line">    for i in describe_sg[&apos;SecurityGroups&apos;]:</span><br><span class="line">        print(&quot;Security Group Name: &quot;+i[&apos;GroupName&apos;])</span><br><span class="line">        print(&quot;The Ingress rules are as follows: &quot;)</span><br><span class="line">        for j in i[&apos;IpPermissions&apos;]:</span><br><span class="line">            print(&quot;IP Protocol: &quot;+j[&apos;IpProtocol&apos;])</span><br><span class="line">            try:</span><br><span class="line">                print(&quot;FromPORT: &quot;+str(j[&apos;FromPort&apos;]))</span><br><span class="line">                print(&quot;ToPORT: &quot;+str(j[&apos;ToPort&apos;]))</span><br><span class="line"></span><br><span class="line">                for k in j[&apos;IpRanges&apos;]:</span><br><span class="line">                    print(&quot;IP Ranges: &quot;+k[&apos;CidrIp&apos;])</span><br><span class="line"></span><br><span class="line">                    if k[&apos;CidrIp&apos;] == unauthorized_ipv4 :</span><br><span class="line">                        authorize_response = handle_sg.authorize_ingress(</span><br><span class="line">                                    IpPermissions=[</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            &apos;FromPort&apos;: int(j[&apos;FromPort&apos;]),</span><br><span class="line">                                            &apos;IpProtocol&apos;: j[&apos;IpProtocol&apos;],</span><br><span class="line">                                            &apos;ToPort&apos;: int(j[&apos;ToPort&apos;]),</span><br><span class="line">                                            &apos;IpRanges&apos;: [</span><br><span class="line">                                                &#123;</span><br><span class="line">                                                    &apos;CidrIp&apos;: authorized_global_ipv4</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            ]</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    ]</span><br><span class="line">                        )</span><br><span class="line">                        revoke_response = handle_sg.revoke_ingress(</span><br><span class="line">                                    IpPermissions=[</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            &apos;FromPort&apos;: int(j[&apos;FromPort&apos;]),</span><br><span class="line">                                            &apos;IpProtocol&apos;: j[&apos;IpProtocol&apos;],</span><br><span class="line">                                            &apos;ToPort&apos;: int(j[&apos;ToPort&apos;]),</span><br><span class="line">                                            &apos;IpRanges&apos;: [</span><br><span class="line">                                                &#123;</span><br><span class="line">                                                    &apos;CidrIp&apos;: unauthorized_ipv4</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            ]</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    ]</span><br><span class="line">                        )</span><br><span class="line">                        print(&quot;Security Group Changed&quot;)</span><br><span class="line">                    else:</span><br><span class="line">                        print(&quot;No Security Group Changed&quot;)</span><br><span class="line">            except Exception as e:</span><br><span class="line">                    print(e.args)</span><br><span class="line">                    print(&quot;No value for ports and ip ranges available for this security group&quot;)</span><br><span class="line">                    continue</span><br><span class="line">        return &apos;end&apos;</span><br></pre></td></tr></table></figure><p>トリガーを先程作ったSNSトピックに設定し、テストに以下のようなモノを作りましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;Records&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;Sns&quot;: &#123;</span><br><span class="line">        &quot;Timestamp&quot;: &quot;2016-11-17T08:34:04.436Z&quot;,</span><br><span class="line">        &quot;Message&quot;: &quot;&#123; \&quot;sg-XXXXX\&quot;&#125;&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>テストのため、実際0.0.0.0/0のSecurityGroup（portはどうでもいいが、80,443でいいかなぁ）を作って、IDをとって、上記の「sg-XXXXX」に書き換えてください。</p><p>lambda関数のページで「テスト」を押したら、実行されるはずですね。  </p><h1 id="インシデントマネジャー-オプション"><a href="#インシデントマネジャー-オプション" class="headerlink" title="インシデントマネジャー(オプション)"></a>インシデントマネジャー(オプション)</h1><p>今の所属会社はインシデント管理のため、Pagerdutyを使っています。<br>それのEMAILアドレスを上記SNSトピックにサブスクすれば、全開放のSecurityGroup IDが送信されます。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ここまで終わりです。お疲れ様でした。<br>一回苦労すれば、後々は安心ですから、やる価値はあるかと思いますよー  </p><p>じゃ今回もここまでにします。<br>またねー</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然ですが、こんなお悩みがお持ちでしょうか。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;社内developer共用のAWSアカウントを作って、クラウド知識を社内に布教しようと思った&lt;/li&gt;
&lt;li&gt;勝手に全開放(ingress 0.0.0.0/0)のSecurityGroupが適用された&lt;/li&gt;
&lt;li&gt;気づいたら、もうインターネットで天然のハニーポット扱い&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こんなアナタに、今日の品物をオススメします！&lt;/p&gt;
    
    </summary>
    
      <category term="infra" scheme="http://kuritan.github.io/categories/infra/"/>
    
    
      <category term="JP" scheme="http://kuritan.github.io/tags/JP/"/>
    
      <category term="AWS" scheme="http://kuritan.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>kubernetesについて社内発表した</title>
    <link href="http://kuritan.github.io/kubernetes%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E7%A4%BE%E5%86%85%E7%99%BA%E8%A1%A8%E3%81%97%E3%81%9F/"/>
    <id>http://kuritan.github.io/kubernetesについて社内発表した/</id>
    <published>2019-10-09T04:37:02.000Z</published>
    <updated>2023-02-07T06:29:58.261Z</updated>
    
    <content type="html"><![CDATA[<p>転職してから、初めて社内発表しました。<br>十数人くらいの少人数ですが、やっぱりドキドキしましたね。<br>内容はdocker周りのおさらいとkubernetesの勧誘がメインで、自分の仕事のレビューもちょっと付けた感じっすね。<br>スライドだけあげます。<br>では、また今度の更新で〜</p><a id="more"></a><script async class="speakerdeck-embed" data-id="050d8e48f4804fe5b07875168008f7c4" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p><img src="https://landscape.cncf.io/images/landscape.png" alt="Cloud Native Landscape"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;転職してから、初めて社内発表しました。&lt;br&gt;十数人くらいの少人数ですが、やっぱりドキドキしましたね。&lt;br&gt;内容はdocker周りのおさらいとkubernetesの勧誘がメインで、自分の仕事のレビューもちょっと付けた感じっすね。&lt;br&gt;スライドだけあげます。&lt;br&gt;では、また今度の更新で〜&lt;/p&gt;
    
    </summary>
    
      <category term="infra" scheme="http://kuritan.github.io/categories/infra/"/>
    
    
      <category term="JP" scheme="http://kuritan.github.io/tags/JP/"/>
    
      <category term="k8s" scheme="http://kuritan.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>本番環境のパブリッククラウドサービス間移行</title>
    <link href="http://kuritan.github.io/%E6%9C%AC%E7%95%AA%E7%92%B0%E5%A2%83%E3%81%AE%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%AF%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E9%96%93%E7%A7%BB%E8%A1%8C/"/>
    <id>http://kuritan.github.io/本番環境のパブリッククラウドサービス間移行/</id>
    <published>2019-08-12T09:00:14.000Z</published>
    <updated>2023-02-07T06:29:58.285Z</updated>
    
    <content type="html"><![CDATA[<p>久しぶりの更新ですね〜<br>今回はインフラ周りの話をしようかと思いまして、いろいろ悩んでいた。<br>だって、夏ってだるいもん！<br>ちょうど最近、仕事で移行のissueが多いので、そのヘンのお話をシェアさせてください。</p><a id="more"></a><h1 id="クラウド間の本番サービス移行"><a href="#クラウド間の本番サービス移行" class="headerlink" title="クラウド間の本番サービス移行"></a>クラウド間の本番サービス移行</h1><p>タイトル通りですが、某クラウドプロバイダーで運用されているサービスを、AWSに移行する話が、最近結構出たので、これを中心にお話をしましょう。<br>と言いたいところですが、うちのボスがなんと、記事を書いていた！<br>バンザイ〜バンザイ〜  </p><p><a href="https://tech.drecom.co.jp/how-to-migrate-to-aws/" target="_blank" rel="noopener">苦手なサービス移行をAWSでやってみた 〜Percona XtraBackupを用いたAuroraへの移行〜</a></p><p>すっげぇ記事で、見たらびっくりしました！<br>皆さんも、詳しい話が知りたければ、上記のリンクをクリックしてくださいね〜  </p><p>めっちゃずるいですが、今回はここまでとさせていただきます。  </p><p>また、気が向いたら、記事を書かせていただきます。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;久しぶりの更新ですね〜&lt;br&gt;今回はインフラ周りの話をしようかと思いまして、いろいろ悩んでいた。&lt;br&gt;だって、夏ってだるいもん！&lt;br&gt;ちょうど最近、仕事で移行のissueが多いので、そのヘンのお話をシェアさせてください。&lt;/p&gt;
    
    </summary>
    
      <category term="infra" scheme="http://kuritan.github.io/categories/infra/"/>
    
    
      <category term="JP" scheme="http://kuritan.github.io/tags/JP/"/>
    
      <category term="AWS" scheme="http://kuritan.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>Google Cloud Next&#39;19 in Tokyoに行きました！</title>
    <link href="http://kuritan.github.io/Google-Cloud-Next-19-in-Tokyo%E3%81%AB%E8%A1%8C%E3%81%8D%E3%81%BE%E3%81%97%E3%81%9F%EF%BC%81/"/>
    <id>http://kuritan.github.io/Google-Cloud-Next-19-in-Tokyoに行きました！/</id>
    <published>2019-08-01T01:12:04.000Z</published>
    <updated>2023-02-07T06:29:58.249Z</updated>
    
    <content type="html"><![CDATA[<p>Google社主催のイベントGoogle Cloud Next’19 in Tokyoが07/30〜08/01に渡って、ザ・プリンス　パークタワー東京＆東京プリンスホテルで開催されました。僕も、業界トレンドや、他社取り込みを聞きたくて、その現場に行きました。</p><a id="more"></a><h1 id="現地へ"><a href="#現地へ" class="headerlink" title="現地へ"></a>現地へ</h1><p>今回自分は後半の7/31~8/1だけ参加しましたので、初日の様子はお届けできませんので、ご勘弁ください。<br><img src="http://wx3.sinaimg.cn/mw690/735d420agy1g5izwu8l3nj20ks0rlgtf.jpg" alt="ザ・プリンス　パークタワー東京"><br>スローガンとして、「かつてないクラウドを体験しよう。」と掲げられているみたい。<br><img src="http://wx2.sinaimg.cn/mw690/735d420agy1g5jx8dx0ymj22io1w0b29.jpg" alt="スローガン"></p><p>早速受付でチェックインし、中に入ろうじゃないか。<br><img src="http://wx3.sinaimg.cn/mw690/735d420agy1g5izwwxzazj21400u0quy.jpg" alt="オフシャル資料集"></p><h1 id="基調講演"><a href="#基調講演" class="headerlink" title="基調講演"></a>基調講演</h1><p>基本的には、GoogleCloudのお偉方や日本ローカルの大手IT企業からの未来展望や、現状おさらいを行いました。<br>ご興味のある方は、youtubeでご覧いただけます。<br><a href="https://www.youtube.com/watch?v=MgXa9kLPUiA&feature=youtu.be" target="_blank" rel="noopener">基調講演</a></p><h1 id="Expo"><a href="#Expo" class="headerlink" title="Expo"></a>Expo</h1><p>今回の場所はホテルの宴会場ですので、ブースとして、はっきり言って狭いのです！IT会社向け、事業会社向け、様々のソリューションや、製品の紹介＆デモが展示され、商談もリラックスの雰囲気の中、交わされた感じかと思います。<br><img src="http://wx4.sinaimg.cn/mw690/735d420agy1g5jx7w3d3fj22io1w0u0x.jpg" alt="賑やかな現場1"><br><img src="http://wx1.sinaimg.cn/mw690/735d420agy1g5jx7mevvwj22io1w0x6p.jpg" alt="賑やかな現場2"><br><img src="http://wx4.sinaimg.cn/mw690/735d420agy1g5izwxnecvj21400u0e81.jpg" alt="賑やかな現場3"></p><p>僕は最近kubernetesを中心に仕事をさせていただきますので、SRE、GKEや、CI/CDなどの領域に関してのプースを探しました。<br>残念ながら、特に気になったものがありませんでしたー</p><h1 id="各セッション"><a href="#各セッション" class="headerlink" title="各セッション"></a>各セッション</h1><p>目当てはやはり各セッションのプレゼンです。<br>メルパイやアサヒグループのGKE取り込み、SREなど、他社の本番環境での設定やイディア、選択の軸を聞き、大変有意義の時間を過ごしました。<br><img src="http://wx3.sinaimg.cn/mw690/735d420agy1g5izwx2yu8j21400u0wxx.jpg" alt="k8s"></p><h1 id="現地周辺"><a href="#現地周辺" class="headerlink" title="現地周辺"></a>現地周辺</h1><p>両ホテルの間は増上寺が挟まって、シャトルバスも運行されていました。<br>そこまで遠くはないですが、なぜシャトルバスいるの？と思われるかもしれませんが、その原因は、東京の異常の暑さだー<br>エアコンから離れたくない！！！！<br><img src="http://wx4.sinaimg.cn/mw690/735d420agy1g5jx83qchrj22io1w0kjl.jpg" alt="googleシャトルバス"><br>が、僕は勇気を出して、徒歩で、隣のホテルに一回往復しました！<br>東京プリンスホテルの方は、ブースエリアがなく、セッション開催のみとなっていました。<br>やっぱパークタワー東京の方が面白い〜<br><img src="http://wx4.sinaimg.cn/mw690/735d420agy1g5jx88fohwj21w02io4qq.jpg" alt="next&#39;19"></p><p>来年もまた、next’20とかが開催されるみたいで、その時また現場の様子をお届けしますー</p><p><img src="http://wx1.sinaimg.cn/mw690/735d420agy1g5jx8hikhzj21w02io7wh.jpg" alt="next&#39;19"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Google社主催のイベントGoogle Cloud Next’19 in Tokyoが07/30〜08/01に渡って、ザ・プリンス　パークタワー東京＆東京プリンスホテルで開催されました。僕も、業界トレンドや、他社取り込みを聞きたくて、その現場に行きました。&lt;/p&gt;
    
    </summary>
    
      <category term="Event" scheme="http://kuritan.github.io/categories/Event/"/>
    
    
      <category term="JP" scheme="http://kuritan.github.io/tags/JP/"/>
    
      <category term="GCP" scheme="http://kuritan.github.io/tags/GCP/"/>
    
  </entry>
  
</feed>
